src/mesh/impls/bout/boutmesh.cxx:  MXSUB = MX / NXPE;
src/mesh/impls/bout/boutmesh.cxx:  OffsetX = PE_XIND*MXSUB;
src/mesh/impls/bout/boutmesh.cxx:  ngx = MXSUB + 2*MXG;
src/mesh/impls/bout/boutmesh.cxx:  xend = MXG + MXSUB - 1;
src/mesh/impls/bout/boutmesh.cxx:    len = pack_data(var_list, MXSUB, MXSUB+MXG, MYG, MYG+MYSUB, ch->omsg_sendbuff);
src/mesh/impls/bout/boutmesh.cxx:      unpack_data(ch->var_list, MXSUB+MXG, MXSUB+2*MXG, MYG, MYG+MYSUB, ch->omsg_recvbuff);
src/mesh/impls/bout/boutmesh.cxx:  return ((xind / MXSUB) == PE_XIND) && ((yind / MYSUB) == PE_YIND);
src/mesh/impls/bout/boutmesh.cxx:  return xloc + PE_XIND * MXSUB;
src/mesh/impls/bout/boutmesh.cxx:  return xglo - PE_XIND * MXSUB;
src/mesh/impls/bout/boutmesh.cxx:  return (xind >= MXG) ? (xind - MXG) / MXSUB : 0;
src/mesh/impls/bout/boutmesh.cxx:  if(MXSUB * NXPE != MX) {
src/mesh/impls/bout/boutmesh.cxx:    throw BoutException("\tTopology error: MXSUB[%d] * NXPE[%d] != MX[%d]\n",MXSUB,NXPE,MX);
src/mesh/impls/bout/boutmesh.cxx:  if((NXPE > 1) && (MXSUB < MXG)) {
src/mesh/impls/bout/boutmesh.cxx:  file.add(MXSUB, "MXSUB", 0);
src/mesh/impls/bout/boutmesh.hxx:  int MYSUB, MXSUB;  ///< Size of the grid on this processor
src/solver/impls/arkode/arkode.cxx:  int MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/arkode/arkode.cxx:  options->get("mudq", mudq, n3Dvars()*(MXSUB+2));
src/solver/impls/arkode/arkode.cxx:  options->get("mldq", mldq, n3Dvars()*(MXSUB+2));
src/solver/impls/cvode/cvode.cxx:  int MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/cvode/cvode.cxx:  options->get("mudq", mudq, n3Dvars()*(MXSUB+2));
src/solver/impls/cvode/cvode.cxx:  options->get("mldq", mldq, n3Dvars()*(MXSUB+2));
src/solver/impls/ida/ida.cxx:  int MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/ida/ida.cxx:  OPTION(options, mudq, n3d*(MXSUB+2));
src/solver/impls/ida/ida.cxx:  OPTION(options, mldq, n3d*(MXSUB+2));
src/solver/impls/petsc-3.1/petsc-3.1.cxx:  int MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/petsc-3.1/petsc-3.1.cxx:  OPTION(options, mudq, n3d*(MXSUB+2));
src/solver/impls/petsc-3.1/petsc-3.1.cxx:  OPTION(options, mldq, n3d*(MXSUB+2));
src/solver/impls/petsc-3.1/petsc-3.1.cxx:    PetscInt MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/petsc-3.1/petsc-3.1.cxx:    PetscInt nx = mesh->xend;//MXSUB;
src/solver/impls/petsc-3.1/petsc-3.1.cxx:    // PetscInt n = MXSUB*MYSUB*nz*dof;
src/solver/impls/petsc-3.1/petsc-3.1.hxx:EXTERN int jstruc(int NVARS, int NXPE, int MXSUB, int NYPE, int MYSUB, int MZ, int MYG, int MXG);
src/solver/impls/petsc-3.2/petsc-3.2.cxx:  int MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/petsc-3.2/petsc-3.2.cxx:  OPTION(options, mudq, n3d*(MXSUB+2));
src/solver/impls/petsc-3.2/petsc-3.2.cxx:  OPTION(options, mldq, n3d*(MXSUB+2));
src/solver/impls/petsc-3.2/petsc-3.2.cxx:    PetscInt MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/petsc-3.2/petsc-3.2.cxx:    PetscInt nx = mesh->xend;//MXSUB;
src/solver/impls/petsc-3.2/petsc-3.2.cxx:    // PetscInt n = MXSUB*MYSUB*nz*dof;
src/solver/impls/petsc-3.2/petsc-3.2.hxx:extern int jstruc(int NVARS, int NXPE, int MXSUB, int NYPE, int MYSUB, int MZ, int MYG, int MXG);
src/solver/impls/petsc-3.3/petsc-3.3.cxx:  int MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/petsc-3.3/petsc-3.3.cxx:  OPTION(options, mudq, n3d*(MXSUB+2));
src/solver/impls/petsc-3.3/petsc-3.3.cxx:  OPTION(options, mldq, n3d*(MXSUB+2));
src/solver/impls/petsc-3.3/petsc-3.3.cxx:    //PetscInt MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/petsc-3.3/petsc-3.3.cxx:    PetscInt nx = mesh->xend;//MXSUB;
src/solver/impls/petsc-3.3/petsc-3.3.cxx:    // PetscInt n = MXSUB*MYSUB*nz*dof;
src/solver/impls/petsc-3.3/petsc-3.3.hxx:extern int jstruc(int NVARS, int NXPE, int MXSUB, int NYPE, int MYSUB, int MZ, int MYG, int MXG);
src/solver/impls/petsc-3.4/petsc-3.4.cxx:  int MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/petsc-3.4/petsc-3.4.cxx:  OPTION(options, mudq, n3d*(MXSUB+2));
src/solver/impls/petsc-3.4/petsc-3.4.cxx:  OPTION(options, mldq, n3d*(MXSUB+2));
src/solver/impls/petsc-3.4/petsc-3.4.cxx:    //PetscInt MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/petsc-3.4/petsc-3.4.cxx:    PetscInt nx = mesh->xend;//MXSUB;
src/solver/impls/petsc-3.4/petsc-3.4.cxx:    // PetscInt n = MXSUB*MYSUB*nz*dof;
src/solver/impls/petsc-3.4/petsc-3.4.hxx:extern int jstruc(int NVARS, int NXPE, int MXSUB, int NYPE, int MYSUB, int MZ, int MYG, int MXG);
src/solver/impls/petsc-3.5/petsc-3.5.cxx:  int MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/petsc-3.5/petsc-3.5.cxx:  OPTION(options, mudq, n3d*(MXSUB+2));
src/solver/impls/petsc-3.5/petsc-3.5.cxx:  OPTION(options, mldq, n3d*(MXSUB+2));
src/solver/impls/petsc-3.5/petsc-3.5.cxx:    //PetscInt MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/petsc-3.5/petsc-3.5.cxx:    PetscInt nx = mesh->xend;//MXSUB;
src/solver/impls/petsc-3.5/petsc-3.5.cxx:    // PetscInt n = MXSUB*MYSUB*nz*dof;
src/solver/impls/petsc-3.5/petsc-3.5.hxx:extern int jstruc(int NVARS, int NXPE, int MXSUB, int NYPE, int MYSUB, int MZ, int MYG, int MXG);
src/solver/impls/petsc/petsc.cxx:  int MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/petsc/petsc.cxx:  OPTION(options, mudq, n3d*(MXSUB+2));
src/solver/impls/petsc/petsc.cxx:  OPTION(options, mldq, n3d*(MXSUB+2));
src/solver/impls/petsc/petsc.cxx:    //PetscInt MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/petsc/petsc.cxx:    PetscInt nx = mesh->xend;//MXSUB;
src/solver/impls/petsc/petsc.cxx:    // PetscInt n = MXSUB*MYSUB*nz*dof;
src/solver/impls/petsc/petsc.hxx:extern int jstruc(int NVARS, int NXPE, int MXSUB, int NYPE, int MYSUB, int MZ, int MYG, int MXG);
src/solver/impls/pvode/pvode.cxx:  int MXSUB = mesh->xend - mesh->xstart + 1;
src/solver/impls/pvode/pvode.cxx:  options->get("mudq", mudq, n3d*(MXSUB+2));
src/solver/impls/pvode/pvode.cxx:  options->get("mldq", mldq, n3d*(MXSUB+2));
