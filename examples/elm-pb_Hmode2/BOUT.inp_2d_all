# settings file for BOUT++
# High-Beta reduced MHD case

##################################################
# Global settings used by the core code

NOUT = 100          # number of time-steps
TIMESTEP = 1e0       # time between outputs
archive = 20        # Archive restart files after this number of outputs
wall_limit = 15.5  # wall time limit (in hours)

ShiftXderivs = true # use shifted radial derivatives?
TwistShift = true   # use twist-shift condition?
ShiftOrder = 0      # interpolation order (1 = nearest neighbour, 0=FFT)
TwistOrder = 0      # order of twist-shift interpolation

MZ = 65             # number of points in z direction (2^n + 1)
ZPERIOD = 5        # Fraction of a torus to simulate

MXG = 2
MYG = 2

#NXPE = 16            # Number of processor in X
NXPE = 64            # Number of processor in X

#grid = "data/cbm18_8_y064_x516_090309.nc"  # Grid file
#grid = "cbm18_dens8.grid_nx68ny64.nc"  # Grid file
grid="data/cbm18_dens6_ne20_0.1_1.4.grid.nc"

dump_format = "nc"      # Dump file format. "nc" = NetCDF, "pdb" = PDB
restart_format = "nc"   # Restart file format

StaggerGrids = false    # Use staggered grids (EXPERIMENTAL)
non_uniform=true
##################################################
# Communications
# Fastest setting depends on machine and MPI
# implementation. Do not affect result.

[comms]

async = false           # Use asyncronous sends?
pre_post = false        # Post receives as early as possible
group_nonblock = false  # Use non-blocking group operations?

##################################################
# Laplacian inversion routines

[laplace]

# max_mode = 16  # Maximum N to solve for
laplace_nonuniform=true
##################################################
# FFTs

[fft]

fft_measure = true  # If using FFTW, perform tests to determine fastest method

##################################################
# derivative methods

[ddx]

first = C4  # order of first x derivatives (options are 2 or 4)
second = C4 # order of second x derivatives (2 or 4)
upwind = W3 # order of upwinding method (1, 4, 0 = TVD (DO NOT USE), 3 = WENO)

[ddy]

first = C4
second = C4
upwind = W3

[ddz]

first = C4  # Z derivatives can be done using FFT
second = C4
upwind = W3

##################################################
# Solver settings

[solver]

# mudq, mldq, mukeep, mlkeep preconditioner options
ATOL = 1.0e-8 # absolute tolerance
RTOL = 1.0e-5  # relative tolerance

use_precon = false    # Use preconditioner: User-supplied or BBD
use_jacobian = false  # Use user-supplied Jacobian

mxstep = 50000   # Number of internal steps between outputs
adams_moulton = false # Use Adams-Moulton method (default is BDF)
func_iter = false     # Functional iteration (default is Newton)

##################################################
# settings for high-beta reduced MHD

[highbeta]

density = 1.0e19       # number density of deuterium [m^-3]
                       # used to produce output normalisations

evolve_jpar = false     # If true, evolve J raher than Psi
                       # EXPERIMENTAL
evolve_pressure = true # If false, switch off all pressure evolution

phi_constraint = false # Solve phi as a constraint (DAE system, needs IDA)
## n0_fake profile and parameters

constn0 = false
n0_fake_prof=true
n0_height=2.0

gyroviscous = false
Zeff=1.0

## Effects to include/exclude

include_jpar0 = true     # determines whether to include jpar0 terms
include_curvature = true # include curvature drive term?

compress = false       # set compressible (evolve Vpar)
nonlinear  = true     # include non-linear terms?

diamag = true         # Include diamagnetic effects?
diamag_grad_t = false  # Include Grad_par(Te) term in Psi equation
diamag_phi0 = true    # Balance ExB against Vd for stationary equilibrium

##################################################
# BRACKET_METHOD flags:
# 0:BRACKET_STD; derivative methods will be determined 
#   by the choices C or W in this input file
# 1:BRACKET_SIMPLE; 2:BRACKET_ARAKAWA; 3:BRACKET_CTU.

bm_exb_flag = 0
bm_mag_flag = 2
##################################################################
withflow = false     # With flow or not
D_0 = 130000        # differential potential
D_s = 20            # shear parameter
K_H_term = false    # Contain K-H term
sign = -1           # flow direction    
x0 = 0.855          # peak location
D_min = 3000        #constant	 
##################################################################

eHall = false         # Include electron pressue effects in Ohm's law?
AA    = 2.0          # ion mass in units of proton mass 

noshear = false        # zero all shear

relax_j_vac = false    # Relax to zero-current in the vacuum
relax_j_tconst = 1e-2  # Time constant for vacuum relaxation

## Toroidal filtering
filter_z = false   # remove all except one mode
filter_z_mode = 1  # Specify which harmonic to keep (1 = fundamental)
low_pass_z = 16    # Keep up to and including this harmonic (-1 = keep all)
zonal_flow = 0    # remove this zonal harmonic  (-1 = keep zonal harmonic)
zonal_field= 0     # remove this zonal harmonic  (-1 = keep zonal harmonic)
zonal_bkgd = 0    # remove this zonal harmonic  (-1 = keep zonal harmonic)

## Jpar smoothing
#smooth_j_x = false   # Filter Jpar in the X direction
lowpass_j_z = 16   # Remove high-k modes. Specifies maximum harmonic to keep
 
## mask in x boundaries
mask_j_x = true

## Magnetic perturbations
include_rmp = false # Read RMP data from grid file

simple_rmp = false  # Enable/disable a simple model of RMP
rmp_n = 3           # Toroidal mode number
rmp_m = 6           # Poloidal mode number
rmp_factor = 1.e-4  # Amplitude of Apar [Tm]
rmp_ramp = 1.e-4    # Timescale [s] of ramp
rmp_polwid = -1.0   # Width of Gaussian factor (< 0 = No Gaussian)
rmp_polpeak = 0.5   # Y location of maximum (fraction)

## Vacuum region control

vacuum_pressure = 0.02 # the pressure below which it is considered vacuum
                       # fraction of peak pressure
vacuum_trans = 0.01   # transition width (fraction of P)

## Resistivity and Hyper-resistivity

vac_lund = 1.0e8    # Lundquist number in vacuum  (negative -> infinity)
core_lund = 1.0e8  # Lundquist number in core (negative -> infinity)
hyperresist = 1.e-7 # Hyper-resistivity coefficient (like 1 / Lundquist number)

## Inner boundary damping

damp_width = -1       # Width of damping region (grid cells)
damp_t_const = 1e-2  # Damping time constant

## Parallel pressure diffusion

diffusion_par = -1.0e-0   # Parallel pressure diffusion (< 0 = none)
diffusion_p4  = -1.0e-5   # parallel hyper-viscous diffusion for pressure (< 0 = none)
diffusion_u4  = -1.0e-5    # parallel hyper-viscous diffusion for vorticity (< 0 = none)
diffusion_a4  = -1.0e-5   # parallel hyper-viscous diffusion for vector potential (< 0 = none)

q95_input = 0.1

### diffusion coefficients calculated from P0 to keep it be stable
diffusion_coef_Hmode = true       # NB: Be sure initial_profile_Hmode=true also
aveYg11J_core = 0.00730841        # averageY(g11*J) at core necessary for inflowing Flux at core calculation
dP0dx_xin_au = -0.0668885         # pressure gradient at core in code normalized unit,  
diffusion_coef_Hmode0 = 1.e1      # specified diffusion coefficient at core, in unit of m^2/s
diffusion_coef_Hmode1 = 1.e2      # maximum value limited especially when normalized psi >  1.0, in unit of m^2/s

################################################
smooth_p0_x = true           # smooth P0 to get rid of the discontinuity at separatrix
outer_mid_plane = -32       # the y index of outer mid-plane
Hmode_rc = false             # switch to calculate the time-evolved equlibrium pressure
Hmode_rc_p0 = false          # switch to calculate the time-evolved equlibrium pressure with diffusion_perp
Hmode_rc_par = false        # switch to calculate the time-evolved equlibrium pressure with diffusion_par
Hmode_rc_vexp = true        # switch to calculate the time-evolved equlibrium pressure with Ve cross Grad p term
converge_const = 1.e0       # constant to control the speed of P0 approaching the steady state solution
Hmode_rc_lowlimit = 1e-5    # limit for the min value of the inverted pressure 
smooth_p0_2 = false          #  smooth d2dx2(P0) to get rid of the discontinuity at separatrix
zero_transp_bndry = false

iterate_phi0 = false   # Using iteration to calculate the equilibrium phi0, does not work well
phi0_ratio = 1e-8      # Ampilfying coefficient of phi0 in the interation methid

Hmode_rc2 = true            # switch to calculate the time-evolved zonal pressure
Hmode_rc_phi00 = true       # Using iteration to calculate the zonal turbulent phi
phi00_ratio = 1e-8          # Ampilfying coefficient of phi00 in the interation method
converge_const_phi00 = 1.e-2       # constant to control the speed of Phi00 approaching the steady state solution
phi00_flags = 3
Hmode_rc_U00 = true          # Using iteration to calculate the zonal turbulent U
converge_const_u00 = 1.e0    # constant to control the speed of U00 approaching the steady state solution
Hmode_rc_psi00 = false       # Using iteration to calculate the zonal turbulent phi
converge_const_psi00 = 1.e0       # constant to control the speed of psi00 approaching the steady state solution
include_zonal_psi = true     # switch to substract the zonal nonlinear flutter terms
include_jpar00 = false       # switch to calculate Jpar00

transport_only = false        # Only calculate the transport equation, work if Hmode_rc2 = true 
timestep = 79                # The timestep of previous data used as the initial of transport equation
path = "data_t395/"           # The path of the original Vexb data in dmp file

output_flux =true           # output zonal fluxes for vorticity, energy and magnetic

#P00_flags = 4096 #4202496  #4194316
##P00_sep_val = 314.        #pressure value at separatrix with unit of  Pa
##sheath_position = 411    #grid index on x for the start of sheath
##calc_interval = 300        #timestep to calculaye new P0
################################################

## heat source in pressure in watts
 
heating_P = -1e4   #   heat power in watts (< 0 = none)
hp_width  = 0.1     #   heat width, in percentage of nx (< 0 = none)
hp_length = 0.15    #   heat length in percentage of nx (< 0 = none)
 
## sink rate in pressure
 
sink_P = -1e2   #   sink rate in pressure (< 0 = none)
sp_width  = 0.1     #   sink width, in percentage of nx (< 0 = none)
sp_length = 0.30    #   sink length in percentage of nx (< 0 = none)
 
 
## left edge sink rate in vorticity
sink_Ul = -0.5e1        #   left edge sink rate in vorticity (< 0 = none)
su_widthl  = 0.06     #   left edge sink width, in percentage of nx (< 0 = none)
su_lengthl = 0.1     #   left edge sink length in percentage of nx (< 0 = none)
 
## right edge sink rate in vorticity
sink_Ur = -0.5e1        #   right edge sink rate in vorticity (< 0 = none)
su_widthr  = 0.06     #   right edge sink width, in percentage of nx (< 0 = none)
su_lengthr = 0.1     #   right edge sink length in percentage of nx (< 0 = none)

## Viscosity and Hyper-viscosity

#viscos_psi = 0.01  #Parallel Psi viscosity
viscos_par = 0.1   # Parallel viscosity (< 0 = none)
viscos_perp = -1.0  # Perpendicular
hyperviscos = -1.0  # Radial hyper viscosity

## Compressional terms (only when compress = true)
phi_curv = true    # Include curvature*Grad(phi) in P equation
# gamma = 1.6666

## field inversion flags: Add the following
#  1 - Zero-gradient DC component on inner boundary
#  2 - Zero-gradient AC component on inner boundary
#  4 -      "        DC     "      " outer    "
#  8 -      "        AC     "      " outer    "
# 16 - Zero all DC components of the result
# 32 - Don't use previous solution to start iterations
#      (iterative methods only) 
# 64 - Set the width of the boundary layer to 1
# 128 - use 4th order differencing
# 256 - Laplacian = 0 inner boundary (combine 2nd & 4th-order)
# 512 - Laplacian = 0 outer boundary ( sometimes works )
# 4096 - Set inner Dirichlet boundary with value
# 8192 - Set outer Dirichlet boundary with value
# 4194304 - Set inner Neumann boundary with value
# 8388608 - Set outer Neumann boundary with value

#phi_flags = 74  # inversion flags for phi (2+8+64+128)
phi_flags = 3  # 256 + 512

#apar_flags = 74 # 2+8
apar_flags = 769

##################################################
# settings for individual variables
# The section "All" defines default settings for all variables
# These can be overridden for individual variables in
# a section of that name.

[All]
scale = 0.0 # default size of initial perturbations

# form of initial profile:
# 0 - constant
# 1 - Gaussian
# 2 - Sinusoidal
# 3 - Mix of mode numbers (like original BOUT)
# 7 - Mix of mode numbers with same amplitude

xs_opt = 1
ys_opt = 1
zs_opt = 5

xs_s0 = 0.5
xs_wd = 0.1

ys_s0 = 0.5
ys_wd = 0.2

zs_mode = 3

# boundary conditions
# -------------------
# dirichlet    - Zero value
# neumann      - Zero gradient
# zerolaplace  - Laplacian = 0, decaying solution
# constlaplace - Laplacian = const, decaying solution
#
# relax( )   - Make boundary condition relaxing

bndry_all = dirichlet # Default to zero-value

[U]   # vorticity

scale = 1.0e-4
#function=gauss((x-0.5)/0.03)*gauss((y-0.0625*3.14*2)/0.2)
[P]  # pressure
#bndry_core = neumann
#scale = 1.0e-5

[Psi]  # Vector potential

# zero laplacian
bndry_xin = zerolaplace
bndry_xout = zerolaplace

[J]    # parallel current

# Zero gradient in the core
#bndry_core = neumann

[Vpar]

bndry_core = neumann

[phi]

bndry_core = neumann

[p00]
#bndry_xin = neumann(-0.115485)
#bndry_xout = neumann
#bndry_xin = dirichlet(0.0141667)
#bndry_xout = dirichlet(1.41688e-06)
bndry_xin = dirichlet(0.0)
bndry_xout = dirichlet(0.0)
#bndry_xout = neumann

[phi00]

bndry_core = neumann
bndry_sol = neumann
#bndry_xin = dirichlet(-4.41377e-05)
#bndry_xout = dirichlet(-4.37007e-07)

[phi0_cal]
 
bndry_xin = neumann
bndry_xout = neumann

[phi00_inv]

bndry_xin = neumann
#bndry_xout = neumann
 
[U00]
#bndry_core = neumann

[psi00]

bndry_xin = zerolaplace
bndry_xout = zerolaplace

