# settings file for BOUT++
# glf 3+1 model for KBM

##################################################
# Global settings used by the core code

NOUT = 100          # number of time-steps
TIMESTEP = 1        # time between outputs
archive = 10000        # Archive restart files after this number of outputs
wall_limit = 0.15   # wall time limit (in hours)

ShiftXderivs = true # use shifted radial derivatives?
TwistShift = true   # use twist-shift condition?
ShiftOrder = 0      # interpolation order (1 = nearest neighbour, 0=FFT)
TwistOrder = 0      # order of twist-shift interpolation
non_uniform = true     

MZ = 65             # number of points in z direction (2^n + 1)
ZPERIOD = 5        # Fraction of a torus to simulate

MXG = 2
MYG = 2

NXPE = 32            # Number of processor in X

#grid = "data/cyclone_516x64.nc"
grid = "data/cbm18_dens6.grid.nc"
#grid = "data/cbm18_li_dens6_nx516ny128_t1k.grid.nc"


dump_format = "nc"      # Dump file format. "nc" = NetCDF, "pdb" = PDB
restart_format = "nc"   # Restart file format

StaggerGrids = false    # Use staggered grids (EXPERIMENTAL)

##################################################
# Communications
# Fastest setting depends on machine and MPI
# implementation. Do not affect result.

[comms]

async = false           # Use asyncronous sends?
pre_post = false        # Post receives as early as possible
group_nonblock = false  # Use non-blocking group operations?

##################################################
# Laplacian inversion routines

[laplace]
laplace_nonuniform = true
nonuniform = true
# max_mode = 16  # Maximum N to solve for

##################################################
# FFTs

[fft]

fft_measure = true  # If using FFTW, perform tests to determine fastest method

##################################################
# derivative methods

[ddx]

first = C4  # order of first x derivatives (options are 2 or 4)
second = C4 # order of second x derivatives (2 or 4)
upwind = W3 # order of upwinding method (1, 4, 0 = TVD (DO NOT USE), 3 = WENO)

[ddy]

first = C4
second = C4
upwind = W3

[ddz]

first = C4  # Z derivatives can be done using FFT
second = C4
upwind = W3

##################################################
# Solver settings

[solver]

# mudq, mldq, mukeep, mlkeep preconditioner options
ATOL = 1.0e-8 # absolute tolerance
RTOL = 1.0e-5  # relative tolerance

use_precon = false    # Use preconditioner: User-supplied or BBD
use_jacobian = false  # Use user-supplied Jacobian

mxstep = 10000   # Number of internal steps between outputs
adams_moulton = false # Use Adams-Moulton method (default is BDF)
func_iter = false     # Functional iteration (default is Newton)

##################################################
# settings for high-beta reduced MHD

[glfkbm]

density = 1.0e20       # number density of deuterium [m^-3]   

## Effects to include/exclude
include_curvature = true # include curvature drive term?
curv_model = 1
nonlinear = true     # include non-linear terms?
nonlinear_terms = 100  
code_test = false      # save intermidiate quantities for check
ddtU_terms_test = false # save terms in ddt(U)
ddtPsi_terms_test = false  # save terms in ddt(Psi)
smooth_U0_x = true        # smooth U0 in x direction
Zero_Te = false        #no electron pressure equation
quasineutral = false   # With quasi neutral condition
phi_constant_density = false # Without n0 term in invert phi
electrostatic = false  # no Psi, Pe perturbation
electrostatic_poisson_model = 1

eHall = true        #Pe term in Ohm's law
gyroaverage = true     # include gyro average effect
FLR_effect = true       # include FLR effect (phi_f terms)
continuity = true      # use continuity equation
compression = true
energy_flux = true
isotropic = false

Landau_damping_i = true
Landau_damping_e = true
Lpar = 24.2

toroidal_closure1 = true  #toroidal closure in pressure equation
toroidal_closure2 = true
toroidal_closure3 = true

nu1r = 1.232
nu1i = 0.437
nu2r = -0.912
nu2i = 0.362
nu3r = -1.164
nu3i = 0.294
nu4r = 0.478
nu4i = -1.926
nu5r = 0.515
nu5i = -0.958

##################################################
## profile control
Equilibrium_case = 4

#************ 1 cbm equilibrium control **********#
P_0 = 8675
s_p = 0.225
P_min = 1.14 
P_x0 = 0.920
PDped = 0.075       
Pa = 0.0028
Pdel = 22.0
Pbottom = -21.5
etai = 1.0          #Ln/Lt  if set, do not need s_t   
T_0 = -1.0                #if <0, is n_0 10^19 m-3
#*************** 2 cyclone *********************#

n0_cyclone = 1.0e20

############### 4 cbm tanh #######################

fit_pressure = true

fit_density = true
N_a = 0.19954027567149998
N_b = 0.39954027567149997
N_m = 0.877696384537
N_w = 0.0716665629298
N_s = 0.342882354001

#hyperbolic tanh profile, N0 = N0tanh(n0_height*Nbar, n0_ave*Nbar, n0_width, n0_center) 
n0_fake_prof = false
n0_height = 0.400        #the total height of profile of N0, in percentage of Ni_x
n0_ave = 0.200          #the constant tail of N0 profile, in percentage of Ni_x
n0_width = 0.1         #the width of the gradient of N0, in percentage of x
n0_center = 0.633      #the the center of N0, in percentage of x
n0_bottom_x = 0.81     #the start of flat region of N0 on SOL side, in percentage of x 
T0_const = 1000


##################################################
# BRACKET_METHOD flags:
# 0:BRACKET_STD; derivative methods will be determined 
#   by the choices C or W in this input file
# 1:BRACKET_SIMPLE; 2:BRACKET_ARAKAWA; 3:BRACKET_CTU.

bm_exb_flag = 0
bm_mag_flag = 2
##################################################################

## Toroidal filtering
filter_z = false   # remove all except one mode
filter_z_mode = 1  # Specify which harmonic to keep (1 = fundamental)
low_pass_z = 16    # Keep up to and including this harmonic (-1 = keep all)
zonal_flow = 0    # remove this zonal harmonic  (-1 = keep zonal harmonic)
zonal_field= 0     # remove this zonal harmonic  (-1 = keep zonal harmonic)
zonal_bkgd = -1    # remove this zonal harmonic  (-1 = keep zonal harmonic)

nl_y = -1.0   # nonlinear filter for density

## Jpar smoothing
jpar_bndry_width = -5 #remove current at edge 

## Resistivity and Hyper-resistivity
vac_lund = 1.0e8    # Lundquist number in vacuum  (negative -> infinity)
core_lund = 1.0e8  # Lundquist number in core (negative -> infinity)
hyperresist = 1.e-4 #hyper-resistivity

## Vacuum region control
vacuum_pressure = 0.02 # the pressure below which it is considered vacuum
                      # fraction of peak pressure
vacuum_trans = 0.01   # transition width (fraction of P)


diffusion_ne4 = -1.0e-8 # 4th order parallel diffusion for electron density (<0 NONE)
diffusion_Ppar4 = -1.0e-4

viscos_par = +0.1       #parallel viscosity
viscos_Ppar_e = -0.1    #parallel viscosity in electro pressure

## left edge sink rate in vorticity
sink_Ul = -1.0e1        #   left edge sink rate in vorticity (< 0 = none)
su_widthl  = 0.06     #   left edge sink width, in percentage of nx (< 0 = none)
su_lengthl = 0.1     #   left edge sink length in percentage of nx (< 0 = none)

## right edge sink rate in vorticity
sink_Ur = -1.0e2        #   right edge sink rate in vorticity (< 0 = none)
su_widthr  = 0.06     #   right edge sink width, in percentage of nx (< 0 = none)
su_lengthr = 0.1     #   right edge sink length in percentage of nx (< 0 = none)

## left edge sink rate in vorticity
sink_nil = -1.0e1        #   left edge sink rate in vorticity (< 0 = none)
sni_widthl  = 0.06     #   left edge sink width, in percentage of nx (< 0 = none)
sni_lengthl = 0.1     #   left edge sink length in percentage of nx (< 0 = none)

## left edge sink rate in vorticity
sink_Ppar_il = -1.0e1        #   left edge sink rate in vorticity (< 0 = none)
sPpar_i_widthl  = 0.06     #   left edge sink width, in percentage of nx (< 0 = none)
sPpar_i_lengthl = 0.1     #   left edge sink length in percentage of nx (< 0 = none)

## left edge sink rate in vorticity
sink_Pperp_il = -1.0e1        #   left edge sink rate in vorticity (< 0 = none)
sPperp_i_widthl  = 0.06     #   left edge sink width, in percentage of nx (< 0 = none)
sPperp_i_lengthl = 0.1     #   left edge sink length in percentage of nx (< 0 = none)

## field inversion flags: Add the following
#  1 - Zero-gradient DC component on inner boundary
#  2 - Zero-gradient AC component on inner boundary
#  4 -      "        DC     "      " outer    "
#  8 -      "        AC     "      " outer    "
# 16 - Zero all DC components of the result
# 32 - Don't use previous solution to start iterations
#      (iterative methods only) 
# 64 - Set the width of the boundary layer to 1
# 128 - use 4th order differencing
# 256 - Laplacian = 0 inner boundary (combine 2nd & 4th-order)
# 512 - Laplacian = 0 outer boundary ( sometimes works )

ns_flags = 769 # inversion flags for all inversion quantities
phi_flags = 769
Psi_flags = 769
Vpar_flags = 769

##################################################
# settings for individual variables
# The section "All" defines default settings for all variables
# These can be overridden for individual variables in
# a section of that name.

[All]
scale = 0.0 # default size of initial perturbations

# form of initial profile:
# 0 - constant
# 1 - Gaussian
# 2 - Sinusoidal
# 3 - Mix of mode numbers (like original BOUT)

xs_opt = 1
ys_opt = 1
zs_opt = 5

xs_s0 = 0.5
xs_wd = 0.1

ys_s0 = 0.5
ys_wd = 0.3

zs_mode = 1

# boundary conditions
# -------------------
# dirichlet    - Zero value
# neumann      - Zero gradient
# zerolaplace  - Laplacian = 0, decaying solution
# constlaplace - Laplacian = const, decaying solution
#
# relax( )   - Make boundary condition relaxing

bndry_all = dirichlet # Default to zero-value


[ni]   # electron density
#bndry_xin = neumann
#bndry_xout = neumann
bndry_core = neumann
#scale = 1.e-5

[Lambda_i] 
bndry_core = neumann
#bndry_core = neumann

[Ppar_i]  # ion parallel pressure

#bndry_xin = neumann
#bndry_xout = neumann
bndry_core = neumann

[Pperp_i] # perpendicular pressure

#bndry_xin = neumann
#bndry_xout = neumann
bndry_core = neumann

[U]
scale = 1.0e-5


[Psi] 

bndry_xin = zerolaplace
bndry_xout = zerolaplace

[Ppar_e]

bndry_core = neumann

[Pperp_e]

bndry_core = neumann

[Jpar]

bndry_core = dirichlet
#bndry_core = neumann
#bndry_xin = neumann
#bndry_xout = neumann

[phi]

bndry_core = neumann
#bndry_sol = neumann

[q_par]

[q_perp]

[modb0xglB0]

bndry_core = neumann
bndry_xin = neumann
bndry_xout = neumann

[mytest2]

[sour1]

bndry_core = neumann
bndry_xin = neumann
bndry_xout = neumann

[sour2]

bndry_core = neumann
bndry_xin = neumann
bndry_xout = neumann

[Grad2_ni]

bndry_core = zerolaplace
bndry_xout = zerolaplace
bndry_core = zerolaplace

[Grad2_Ppar]

bndry_core = zerolaplace
bndry_xout = zerolaplace
bndry_core = zerolaplace

[toroidal1]

bndry_core = neumann
bndry_xin = neumann
bndry_xout = neumann

[toroidal2]

bndry_core = neumann
bndry_xin = neumann
bndry_xout = neumann

[toroidal3]

bndry_core = neumann
bndry_xin = neumann
bndry_xout = neumann

[toroidal4]

bndry_core = neumann
bndry_xin = neumann
bndry_xout = neumann

[toroidal5]

bndry_core = neumann
bndry_xin = neumann
bndry_xout = neumann
