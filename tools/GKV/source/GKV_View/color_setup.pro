;+ ; NAME: ;	COLOR_SETUP;; PURPOSE: ;;	Set up an 11 element color table, with an optional "image" color;	table for displaying images.;; CATEGORY: ;;	DIII-D development ;; CALLING SEQUENCE: ;;	color_setup,  TABLE  [,REVERSE=reverse] [,IMAGE_COLORS=image_colors];; INPUT PARAMETERS: ;;	TABLE:  0 = black and white color table;		1 = 10 colors (see below);		2 = 10 shades of gray;;	        If not specified, TABLE defaults to 1.;; OPTIONAL INPUT PARAMETERS: ;;	none ;; KEYWORDS: ;;	REVERSE:  Optional keyword that allows switching of background and;		  foreground colors.;;	IMAGE_COLORS:  The number of colors to use in the image color table.;		       If 0, only 10 colors are defined.  If > 0, the additional;		       colors are allocated and set aside as the colors to use;		       for plotting images.;; OUTPUTS: ;;	None.;; COMMON BLOCKS: ;;	None.  ;; SIDE EFFECTS: ;;	Sets the color table.  Limits the number of colors available to ;	10 (+ IMAGE_COLORS if it is > 0) if this is called before any plots ;	are made.;; RESTRICTIONS:;;	None.;; PROCEDURE: ;;	This routine sets up an 11 element color table.  If TABLE=1, then the;	table is as follows:;	;		0 = background;		1 = foreground;		2 = red;		3 = blue;		4 = green;		5 = yellow;		6 = orange;		7 = cyan;		8 = magneta;		9 = purple;		10= grey;	;	If TABLE=0, the color table is 0 = background and 1-9 = foreground.;	;	If TABLE=2, the color is a grayscale ramp from background to foreground.;	;	Setting the REVERSE keyword switches the definitions of the background;	and foreground colors for the X windows device.  For the postscript;	device, it has no effect.  In the process, the appearance of some of;	the colors will switch - this is to improve their visibility against a;	white background.;;	Device         REVERSE keyword		Background	Foreground;	------	       ---------------          ----------      ----------;	  X              not set                 Black           White;	  X                set                   White           Black;         PS            set or not set           White           Black;;	If the IMAGE_COLORS keyword is an integer > 0, the color table actually;	contains 11 + IMAGE_COLOR elements.  The first 11 are as defined above.;	The remaining colors can be set by the user to allow image display;	simultaneously with plots using the color table above.  ;; EXAMPLE:  Displaying a contour plot over an image;;	Setup the color table, reserving 35 colors for image display:;	  color_setup,1,image_colors = 35 ; table is 11+35 = 46 elements total;;	Define an array for plotting:;	  i = findgen(101)/100. * 4. * !pi;	  z = cos(i) # sin(i);;	Make the contour plot to define location in window:;	  contour,z,nlevels=11,color=color_index('foreground');;	Display the image so that it lines up with contour plot:;;	  ;location of contour plot's origin;	  px = !x.window * !d.x_vsize;	  py = !y.window * !d.y_vsize;;	  ;size of image (for scaling it into size of window);	  sx = (px[1] - px[0] + 1);	  sy = (py[1] - py[0] + 1);;	  ;scale the array into this range, and into the size of the screen,;	  ;to form the image;;	  img = bytscl(congrid(z,sx,sy),$;		top=color_image_ncolors())+color_image_bottom();;	  ;display the image:;;	  tv,img,px[0],py[0];;	Redisplay the contour plot to see contour lines over image:;	  contour,z,nlevels=11,/noerase,color=color_index('foreground');; EXAMPLE: using XLOADCT to change the image color table;;	  xloadct, bottom=color_image_bottom(), ncolors=color_image_ncolors();; CODE TYPE: utility;; CODE SUBJECT: other;; EASE OF USE: Can be used with existing documentation;; OPERATING SYSTEMS:  HP-UX, OSF/Unix, OpenVMS, MacOS;; EXTERNAL CALLS:  none;; RESPONSIBLE PERSON: Jeff Schachter;; DATE OF LAST MODIFICATION:  03/12/99;; MODIFICATION HISTORY: ;	Originally developed at MIT by Jeff Schachter;	GA Version 1.0: Released by Jeff Schachter 98.03.21;	GA Version 2.0: Jeff Schachter 98.05.03;			added image colors;	GA Version 2.1: Jeff Schachter 98.06.05;			reset current window after setting color table;       GA Version 2.2: Jeff Schachter 98.09.30;                       make pixmap used to limit number of colors as;                       small as possible;       Jeff Schachter 1999.03.12:  Use system variable to keep track;         of number of image colors;	1999.11.10 Q.Peng if device is true-color, func color_index converts;		the index to a pseudo-color table to an index of a true-color. ;	01-24-2000 Q.P added color Grey to the default colors as number 10.;-	;+ ; NAME: ;	COLOR_INDEX;; PURPOSE: ;;	Returns the color table index corresponding to a named color, from;	the color table set up by COLOR_SETUP;; CATEGORY: ;;	DIII-D development ;; CALLING SEQUENCE: ;;	index = COLOR_INDEX(color);; INPUT PARAMETERS: ;;	color:  a string describing the color (not case-sensitive);; OPTIONAL INPUT PARAMETERS: ;;	none ;; KEYWORDS: ;;	none;; OUTPUTS: ;;	The color index of the color specified.  If the color specified does not;	match any in the color table, the background color index is returned (0).;; COMMON BLOCKS: ;;	None.  ;; SIDE EFFECTS: ;;	None.;; RESTRICTIONS:;;	The colors in the color table will only correspond to the values returned;	by COLOR_INDEX if COLOR_SETUP is called first.;; PROCEDURE: ;;	This function returns the integer color table index corresponding to the;	specified color string.  The string can be in any case.  The following;	values are returned:;	;		0 = background;		1 = foreground;		2 = red;		3 = blue;		4 = green;		5 = yellow;		6 = orange;		7 = cyan;		8 = magneta;		9 = purple;; CODE TYPE: utility;; CODE SUBJECT: other;; EASE OF USE: Can be used with existing documentation;; OPERATING SYSTEMS:  HP-UX, OSF/Unix, OpenVMS, MacOS;; EXTERNAL CALLS:  none;; RESPONSIBLE PERSON: Jeff Schachter;; DATE OF LAST MODIFICATION:  3/21/98;; MODIFICATION HISTORY:;;	Originally developed at MIT by Jeff Schachter;	GA Version 1.0: Released by Jeff Schachter 98.03.21;-	;+ ; NAME: ;	COLOR_LIST;; PURPOSE: ;;	returns the list of colors set up by COLOR_SETUP;; CATEGORY: ;;	DIII-D development ;; CALLING SEQUENCE: ;;	list = COLOR_LIST();; INPUT PARAMETERS: ;;	none ;; OPTIONAL INPUT PARAMETERS: ;;	none ;; KEYWORDS: ;;	None.;; OUTPUTS: ;;	String list of colors.;; COMMON BLOCKS: ;;	None.  ;; SIDE EFFECTS: ;;	None.;; RESTRICTIONS:;;	None.;; PROCEDURE: ;;	This function returns the list of colors defined in the color table by;	COLOR_SETUP.;; CODE TYPE: utility;; CODE SUBJECT: other;; EASE OF USE: Can be used with existing documentation;; OPERATING SYSTEMS:  HP-UX, OSF/Unix, OpenVMS, MacOS;; EXTERNAL CALLS:  none;; RESPONSIBLE PERSON: Jeff Schachter;; DATE OF LAST MODIFICATION:  3/21/98;; MODIFICATION HISTORY:;;	Originally developed at MIT by Jeff Schachter;	GA Version 1.0: Released by Jeff Schachter 98.03.21;-	;+ ; NAME: ;	COLOR_IMAGE_NCOLORS;; PURPOSE: ;;	Returns the number of colors reserved for displaying images;	after COLOR_SETUP is called with the IMAGE_COLORS keyword set.;; CATEGORY: ;;	DIII-D development ;; CALLING SEQUENCE: ;;	ncolors = COLOR_IMAGE_NCOLORS();; INPUT PARAMETERS: ;;	none;; OPTIONAL INPUT PARAMETERS: ;;	none ;; KEYWORDS: ;;	none;; OUTPUTS: ;;	Integer - Number of colors in the "image" color table. Will be zero;	if no image color table is defined.;; COMMON BLOCKS: ;;	None.  ;; SIDE EFFECTS: ;;	None.;; RESTRICTIONS:;;	Only useful for determining image colors if COLOR_SETUP was called first;	with the IMAGE_COLORS keyword set.;; PROCEDURE: ;;	Call this function to determine the number of colors in the image color;	table, which is created by calling COLOR_SETUP with the IMAGE_COLORS ;	keyword.  ;;	See COLOR_SETUP for an example on how to use it to display images over ;	contour plots.;; CODE TYPE: utility;; CODE SUBJECT: other;; EASE OF USE: Can be used with existing documentation;; OPERATING SYSTEMS:  HP-UX, OSF/Unix, OpenVMS, MacOS;; EXTERNAL CALLS:  none;; RESPONSIBLE PERSON: Jeff Schachter;; DATE OF LAST MODIFICATION:  05/04/98;; MODIFICATION HISTORY:;;	GA Version 1.0: Released by Jeff Schachter 98.05.04;-	;+ ; NAME: ;	COLOR_IMAGE_BOTTOM;; PURPOSE: ;;	Returns the starting index of the color table reserved for displaying ;	images after COLOR_SETUP is called with the IMAGE_COLORS keyword set.;; CATEGORY: ;;	DIII-D development ;; CALLING SEQUENCE: ;;	bottom = COLOR_IMAGE_BOTTOM();; INPUT PARAMETERS: ;;	none;; OPTIONAL INPUT PARAMETERS: ;;	none ;; KEYWORDS: ;;	none;; OUTPUTS: ;;	Integer - Starting index of the "image" color table. ;; COMMON BLOCKS: ;;	None.  ;; SIDE EFFECTS: ;;	None.;; RESTRICTIONS:;;	Only useful for determining image colors if COLOR_SETUP was called first;	with the IMAGE_COLORS keyword set.;; PROCEDURE: ;;	Call this function to determine the starting index of the image color;	table, which is created by calling COLOR_SETUP with the IMAGE_COLORS ;	keyword.  ;;	See COLOR_SETUP for an example on how to use it to display images over ;	contour plots.;; CODE TYPE: utility;; CODE SUBJECT: other;; EASE OF USE: Can be used with existing documentation;; OPERATING SYSTEMS:  HP-UX, OSF/Unix, OpenVMS, MacOS;; EXTERNAL CALLS:  none;; RESPONSIBLE PERSON: Jeff Schachter;; DATE OF LAST MODIFICATION:  05/03/98;; MODIFICATION HISTORY:;;	GA Version 1.0: Released by Jeff Schachter 98.05.03;-	;+ ; NAME: ;	COLOR_IMAGE_RANGE;; PURPOSE: ;;	Returns the indecies in the color table reserved for displaying images;	after COLOR_SETUP is called with the IMAGE_COLORS keyword set.;; CATEGORY: ;;	DIII-D development ;; CALLING SEQUENCE: ;;	indecies = COLOR_IMAGE_RANGE();; INPUT PARAMETERS: ;;	none;; OPTIONAL INPUT PARAMETERS: ;;	none ;; KEYWORDS: ;;	none;; OUTPUTS: ;;	A long array from N0 to N1, where N0 is the starting index of the;	image color table (= 11, since there are 11 colors in the "main table");	and where N1 = N0 + the number of image colors.;;	If COLOR_SETUP was not called with the IMAGE_COLORS keyword set, or;	if IMAGE_COLORS was <=0, COLOR_IMAGE_RANGE returns -1.;; COMMON BLOCKS: ;;	None.  ;; SIDE EFFECTS: ;;	None.;; RESTRICTIONS:;;	Only useful for determining image colors if COLOR_SETUP was called first;	with the IMAGE_COLORS keyword set.;; PROCEDURE: ;;	Call this function to determine the indecies of the colors available;	for image plotting.  See COLOR_SETUP for an example on how to use it;	to display images over contour plots.;; CODE TYPE: utility;; CODE SUBJECT: other;; EASE OF USE: Can be used with existing documentation;; OPERATING SYSTEMS:  HP-UX, OSF/Unix, OpenVMS, MacOS;; EXTERNAL CALLS:  none;; RESPONSIBLE PERSON: Jeff Schachter;; DATE OF LAST MODIFICATION:  05/03/98;; MODIFICATION HISTORY:;;	GA Version 1.0: Released by Jeff Schachter 98.05.03;-	;+ ; NAME: ;	COLOR_IMAGE_SET;; PURPOSE: ;;	Sets the image color table - that is, the part of the color table;	reserved for image display if COLOR_SETUP is first called with the;	IMAGE_COLORS keyword set.;; CATEGORY: ;;	DIII-D development ;; CALLING SEQUENCE: ;;	COLOR_IMAGE_SET,r,g,b;; INPUT PARAMETERS: ;;	R,G,B:   The R,G and B values for each element in the color table;; OPTIONAL INPUT PARAMETERS: ;;	none ;; KEYWORDS: ;;	none;; OUTPUTS: ;;	none;; COMMON BLOCKS: ;;	None.  ;; SIDE EFFECTS: ;;	None.;; RESTRICTIONS:;;	Only useful for setting the color table if COLOR_SETUP was called first;	with the IMAGE_COLORS keyword set.;; PROCEDURE: ;;	Use this procedure INSTEAD of TVLCT to load *just* the image colors.;	This procedure will preserve the first 11 colors defined by COLOR_SETUP;	so they can be used by non-image plots.;;	TVLCT can still be used, but to preserve the first 11 colors defined;	by COLOR_SETUP, call it with the BOTTOM and NCOLORS keywords set ;	appropriately.  ;;	(That is all that this procedure does - call TVLCT with BOTTOM and;	NCOLORS set to preserve the 11 colors defined by COLOR_SETUP).;; CODE TYPE: utility;; CODE SUBJECT: other;; EASE OF USE: Can be used with existing documentation;; OPERATING SYSTEMS:  HP-UX, OSF/Unix, OpenVMS, MacOS;; EXTERNAL CALLS:  none;; RESPONSIBLE PERSON: Jeff Schachter;; DATE OF LAST MODIFICATION:  2/26/99;; MODIFICATION HISTORY:;;	GA Version 1.0: Released by Jeff Schachter 98.05.03;          Version 1.1: Jeff Schachter 99.02.26;                       Store number of colors in image color table in ;                       system variable, so that the correct number is ;                       used when the device is set to PS;-	function color_true  case (!D.NAME) of    'X' : begin      device,get_visual_name=name      return,(name eq 'TrueColor')    end    else: return,(!D.N_COLORS gt 256)  endcaseendfunction color_list  ; returns the list of defined colors  return, ['Background', 'Foreground', 'Red', 'Blue', 'Green', 'Yellow', $	   'Orange', 'Cyan', 'Magenta', 'Purple','Grey']endfunction color_index,color_name  ; returns the index in the color_list array corresponding to the color   ; color_name  ;; If color_name = 0, color_index() will ALWAYS return 0.  ;; However, color_name('Foreground') and color_name('Background')  ;; will work.  flagConvert0 = 0  ; if color_name is a string, convert to the index  ; however, if it is already a number, leave it  sz = size(color_name)  type = sz[sz[0]+1]  if (type eq 7) then begin    index = max((where(strupcase(color_list()) eq strupcase(color_name))))>0    if (index eq 0) then flagConvert0 = 1 ; 'background' requested  endif else index = long(color_name)    ncolors = n_elements(color_list())  case (1) of    (!D.N_COLORS le 2) : index=fix(index gt 0)   ; black and white; allows background to work    (color_true()) : begin                 ; true color      if (index lt ncolors and (index ge (1-flagConvert0))) then begin        ; convert index into defined color table into R,G,B value      ; only do 0 if user specified the string "Background"        tvlct,r,g,b,/get        index = r[index] + 256L * (g[index] + 256L * b[index])      endif ; else do not convert index as it is assumed that it is already the true color value    end    else : begin           ; pseudo-color      if (index gt ncolors-1) then begin  ; convert true color RGB into index into table        tvlct,r,g,b,/get        ruse = (index and 'FF'X)        guse = (index and 'FF00'X)/'100'X        buse = (index and 'FF0000'X)/'10000'X        distance = (r[0:ncolors-1]-ruse)^2 + (g[0:ncolors-1]-guse)^2 + (b[0:ncolors-1]-buse)^2        dummy = min(distance, index)      endif  ; else do not convert index as it is already the index into the pseudocolor table    end  endcase          return,indexendpro color_index_test  ; print the color table mappings for 8/24 bit conversion  l = color_list()  for i=0,n_elements(l)-1 do print,i,color_index(i),color_index(color_index(i))  for i=0,n_elements(l)-1 do print,i,l[i],color_index(l[i]),color_index(color_index(l[i])), $      format='(i3,a12," = ",i8," -> ",i8)'endfunction color_image_bottom  return,n_elements(color_list())endfunction color_image_ncolors  if (color_true()) then return,256-n_elements(color_list())-1 else begin    value = 0    status = execute('value = (!COLOR_SETUP_NCOLORS - color_image_bottom() - 1)>0')    return,value  endelseendfunction color_image_range  ; returns the color table indecies corresponding to the image color table  nimage = color_image_ncolors()  if (nimage gt 0) then begin    return,lindgen(nimage)+color_image_bottom()  endif else return,-1endpro color_image_set,r,g,b  i = color_image_range()  tvlct,r,g,b,min(i)end  pro color_setup,color_flag,reverse=reverse,image_colors=image_colors  ; color_flag tells what type of color table to load (see below)  ; reverse makes black on white plots rather than vice-versa  ; (ie. it causes the background and foreground colors to be reversed)  if (not(keyword_set(reverse))) then reverse=0  if (!D.NAME eq 'PS') then begin    ; When SET_PLOT,'PS' is issued, IDL sets the default color !P.COLOR to 0    ; to switch "black" and "white".  COLOR_SETUP does this switch itself in the     ; color table (to preserve the identity of "Foreground" and "Background")    ; so the default color should ALWAYS be the index of "Foreground".    reverse = 1	; black on white for postscript always    !P.COLOR = color_index('Foreground')   endif  ;===== set up color table structures  foreground = 255 - 255*reverse  ; foreground color = WHITE if reverse = 0, or BLACK if reverse = 1  background = 255 - foreground   ; background color is opposite of foreground  green = 255 - background/2.   yellow= 255 - background/3.         ;  Background Foreground RED BLU GRN   YEL    ORG CYN   MAG PUR GRY Foreground  color={r:[background,foreground,255,  0,    0,yellow,255,    0,255, 90,200], $	 g:[background,foreground,  0,  0,green,   255,175,green,  0,  0,200], $         b:[background,foreground,  0,255,    0,     0,  0,  255,255,128,200]}    ncolor = n_elements(color.r)  greyscale = indgen(ncolor)*fix(255./(ncolor-1))  bw = [background,replicate(foreground,ncolor-1)]  ; If requesting space to load an image color table, allocate the  ; additional space.  But only change the number of colors *after*  ; the 3 default color tables (color, greyscale, bw) are created.  if (n_elements(image_colors) gt 0) then ncolor = ncolor + (byte(image_colors) > 0)  ; add one to number of colors - last color defined is foreground always  ncolor = ncolor + 1  ;;===== store number of colors in system variable (instead of using  ;;!D.N_COLORS to determine size of color table, as size is always  ;;256 for 8 bit postscript output  defsysv,'!COLOR_SETUP_NCOLORS',exists=test  if (not(test)) then defsysv,'!COLOR_SETUP_NCOLORS',ncolor  ;===== limit number of colors if device is X    ;   ;   This only works if color_setup is called before   ;   *any* plot windows are created and any other  ;   window command is issued.; if (!D.NAME eq 'X') then begin;  currentWindow = !D.WINDOW;    window,/free,/pixmap,colors=ncolor,xsize=1,ysize=1;    wdelete,!D.WINDOW;    wset,currentWindow;  endif  ;===== load color table  if (n_elements(color_flag) eq 0) then color_flag = 1 ; default to color  case (color_flag) of    0 : str={r:greyscale, g:greyscale, b:greyscale}  ; choose greyscale color table    1 : str=color 				     ; choose color_list() color table    2 : str={r:bw, g:bw, b:bw}    		     ; choose black and white only  endcase  tvlct,str.r,str.g,str.b ;load the color table  tvlct,[foreground],[foreground],[foreground],!D.N_COLORS-1  !P.Background = color_index('Background')  !P.Color = color_index('Foreground')end