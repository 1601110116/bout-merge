;+ ; NAME: ;     MTANH_FUNCT;; PURPOSE: ;     Calculates a modified hyperbolic tangent function for fitting the density;     across the separatrix derived from the Thomson data;; CALLING SEQUENCE: ;     MTANH_FUNCT,X,A,F [,PDER];; INPUT PARAMETERS: ;     X : Elevation of point where ;     A : Function coefficients for the fit function;; OPTIONAL INPUT PARAMETERS: ;     PDER : Specify this variable if the partial derivatives of the fit ;            function are desired.;; KEYWORDS: ;     NONE;; OUTPUTS: ;     F :  Function values at the X locations;     PDER:  Partial derivative values at the X locations;; COMMON BLOCKS: ;     NONE;; SIDE EFFECTS: ;     NONE;; RESTRICTIONS:;     NONE;; PROCEDURE: ;     Calulate F = A(0) - A(1)*TANH(Z);        where Z=(X-A(2))/A(3);;     Calculate the partial derivatives, PDER, if specified on input;; CODE TYPE: modeling, analysis;; CODE SUBJECT:  edge, rf, transport, equilibrium;; EASE OF USE: can be used with existing documentation;; OPERATING SYSTEMS:  UNIX of all flavors;; EXTERNAL CALLS:  NONE;; RESPONSIBLE PERSON: Ray Jong;	; DATE OF LAST MODIFICATION:  02/17/99;; MODIFICATION HISTORY:;     Created by Gary D. Porter, LLNL;;       MODIFIED TO ADD LINEAR TERM 14 MAR 97 GDP;       Improvements suggested by Wolfgang Suttrop (12 May 97);       Name changed from gslts_funct to tanh_funct 17 FEB 99 RAJ;	Removed reference to !quiet for use with GKV (WMN, 4/1/03);;-	PRO    MTANH_FUNCT,X,A,F,PDER    z=(x-a(2))/a(3)        PTAN = TANH(Z)        qtan=-1.*ptan        rtan=z*exp(-z)/(exp(z)+exp(-z))    f=a(0) - a(1)*PTAN -a(1)*a(4)*rtan    epsilon=1.e-9    df=-a(1)*((1-tanh(z)*tanh(z))+a(4)*rtan*(1-z-z*tanh(z))/z)        IF N_PARAMS(0) LE 3 THEN begin          RETURN ;NEED PARTIAL?        endif         pder = [  [REPLICATE(1.,N_ELEMENTS(X))], $                  [qtan-a(4)*rtan], $                  [-df/(a(3)+epsilon)], $                  [-z*df/(a(3)+epsilon)], $                  [-a(1)*rtan]  ]        RETURNENDFUNCTION GKV_mTanh, 	x=xIn, dx=dxIn, Nx=NxIn, A=AIn,				$			xTitle=xTitleIn, xMnemonic=xMnemonicIn, xUnits=xUnitsIn,$ 			title=titleIn, mnemonic=mnemonicIn, units=unitsIn,	$			RunID=RunID_in, FileID=FileID_in, m_to_cm=m_to_cm			;; Purpose:;;	This function returns a GKVs1D object containing the;	"Tanh" fit (as per G.D. Porter) defined by the coefficeints;	contained in "A".  The "Tanh" fit is given by the function;;		F = A(0) - A(1)*TANH(Z);;	where ;		Z=(X-A(2))/A(3);;	modified such that it fits to a linear ramp on the inboard;	side (that is, negative 'x' side).;;;; Input Keywords;;	x	Set this keyword to a array containing the values of ;		the independent variable at which the "Tanh' fit is to;		be evaluated. Defaults to 101 points centered about 0.;		with a uniform separation of 0.1. (Optional);;	dx	Separation between values of the independent variable.;		Defaults to 0.1. (Optional);;	Nx	Number of points at which the "Tanh" function is to be ;		evaluated.  Defaults to 101. (Optional).;;	A	Coefficients for the 'Tanh' fit -- an array of;		five floating point numbers.  Defaults;		to {1.,1.,.1.,.1., 0.1}. (Optional);;	xTitle	The 'title' of the independent variable.  ;		Defaults to 'x'. (Optional);;    xMnemonic	The 'mnemonic' of the independent variable.;		Defaults to 'x'. (Optional).;;	xUnits	The 'units' of the independent variable.;		Defaults to 'cm'.  (Optional);	;	Title	The 'Title of the dependent variable.;		Defaults to 'T!De!N' (that is, 'T subscript e').;		(Optinal);;    Mnemonic	The 'mnemonic of the  dependent variable.;		Defaults to 'T_e'.\;;	Units	The 'units' of the depedent variable.;		Defaults to 'eV'.  (Optional);;	FileID	The 'FileId' for the GKVs1D object (that is, the ;		first line of the Field which appears at the lower;		right hand corner of the plots. Defaults to ''.;		(Optional);;	RunID	The 'RunId' for the GKVs1D object (that is, the ;		second line of the Field which appears at the lower;		right hand corner of the plots. Defaults to ''.;		(Optional);;  Written by W.M. Nevins;	4/1/03;;; Set up output structure;outputStr = {GKVs1D}title='T!De!N'IF(Query_String(TitleIn)) THEN title=TitleInoutputStr.title=titlemnemonic = 'T_e'IF(Query_String(MnemonicIn)) THEN mnemonic=MnemonicInoutputStr.mnemonic=mnemonicunits='cm!U-3!N'IF(Query_String(UnitsIn)) THEN units=UnitsInoutputStr.units=unitsoutputStr.Indices = PTR_NEW(['*'])outputStr.CodeName = 'Hyperbolic Tangent Profile Fit'IF(N_ELEMENTS(Ain) EQ 5) THEN BEGIN	outputStr.codePI = 'G.D. Porter'	a=aInENDIF ELSE BEGIN	a =  [MAKE_ARRAY(4, /FLOAT, VALUE=1.), 0.1]	outputStr.codePI = 'Used default values for A'ENDELSERunID=''IF(Query_String(RunID_In)) THEN RunID=RunID_InoutputStr.RunID = RunIDFIleID=''IF(Query_String(FileID_In)) THEN FileID = FileID_InoutputStr.FileID = FileID;; Set up grid structure;Grid1 = outputStr.grid1xTitle='x'IF(Query_String(xTitleIn)) THEN xTitle=xTitleInGrid1.Title=xTitlexMnemonic = 'x'IF(Query_String(xMnemonicIn)) THEN xMnemonic=xMnemonicInGrid1.Mnemonic=xMnemonicxUnits = 'cm'IF(Query_String(xUnitsIn)) THEN xUnits=xUnitsInGrid1.Units=xUnitsGrid1.Boundary = "Open";; Compute values of the independent variable;IF(N_ELEMENTS(xIn) GE 2) THEN BEGIN	x=xInENDIF ELSE BEGIN	dx=0.1	IF(N_ELEMENTS(dxIn) EQ 1) THEN dx=dxIn	nx=101	IF(N_ELEMENTS(nxIn) EQ 1) THEN nx = FIX(nx) > 2	x = dx*(FINDGEN(nx) - nx/2 + 0.5*(nx/2 EQ nx/2.))ENDELSEGrid1.Values = PTR_NEW(x)nx = N_ELEMENTS(x)Grid1.irange=[0,nx-1]outputStr.grid1=grid1;; convert independent variable from m to cm if required;IF KEYWORD_SET(m_to_cm) THEN BEGIN	a[2] = a[2]*100.	a[3] = a[3]*100.ENDIF;; Evaluate Tanh fit;MTANH_FUNCT, x, a, foutputStr.values = PTR_NEW(f)output = OBJ_NEW("GKVs1D", outputStr)RETURN, outputEND  ; ****** GKV_mTanh ****** ;