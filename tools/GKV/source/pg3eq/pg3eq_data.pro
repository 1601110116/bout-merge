;; *****************************************************************************************************************; ******************************************     Copyright Notice     *********************************************; *                                                                                                               *; *  This work was produced at the University of California, Lawrence Livermore National Laboratory (UC LLNL)     *; *  under contract no. W-7405-ENG-48 (Contract 48) between the U.S. Department of Energy (DOE) and The Regents   *; *  of the University of California (University) for the operation of UC LLNL. Copyright is reserved to the      *; *  University for purposes of controlled dissemination, commercialization through formal licensing, or other    *; *  disposition under terms of Contract 48; DOE policies, regulations and orders; and U.S. statutes. The rights  *; *  of the Federal Government are reserved under Contract 48 subject to the restrictions agreed upon by the DOE  * ; *  and University as allowed under DOE Acquisition Letter 97-1.                                                 *; *                                                                                                               *; *****************************************************************************************************************;; *****************************************************************************************************************; **********************************************     DISCLAIMER     ***********************************************; *                                                                                                               *; *  This work was prepared as an account of work sponsored by an agency of the United States Government.         *; *  Neither the United States Government nor the University of California nor any of their employees, makes      *; *  any warranty, express or implied, or assumes any liability or responsibility for the accuracy, completeness, *; *  or usefulness  *of any information, apparatus, product, or process disclosed, or represents that its use     *; *  would not infringe privately-owned rights.  Reference herein to any specific commercial products, process,   *; *  or service by trade name, trademark, manufacturer or otherwise does not necessarily constitute or imply its  *; *  endorsement, recommendation, or favoring by the United States Government or the University of California.    *; *  The views and opinions of authors expressed herein do not necessarily state or reflect those of the United   *; *  States Government or the University of California, and shall not be used for advertising or product          *; *  endorsement purposes.                                                                                        *; *                                                                                                               *; *****************************************************************************************************************;;; Reads data from the the netcdf files (*.x.nc, *.h.nc and *.c.nc) ; created by pg3eq using Dan Shumaker's NETCDF_pg3eq package,and  ; uses this data to create GKV data objects;;  Written by W.M. Nevins 1/17/99;Function pg3eq_data, path=file_path, file=file_name, var=var_name_inFORWARD_FUNCTION  netcdf_pg3eq;IF KEYWORD_SET(file_path) THEN BEGIN	data_in=netcdf_pg3eq(path=file_path, file=file_name, var=var_name_in) ENDIF ELSE BEGIN	data_in=netcdf_pg3eq()					; Use netcdf_pg3eq to read data in to structure arrayENDELSEfile_name=data_in.file_name					; Get name of data fileseparator="/"								; Path separator for unix devicesIF (!D.Name EQ "MAC") then separator=":"			; or for MAC'ssubstrings=STRSPLIT(file_name, separator, /Extract)	; Break file_name into substringsn_strings=N_ELEMENTS(substrings)filename=substrings[n_strings-1]				; Strip leading directory names of filenameseparator="."subsubstrings=STRSPLIT(filename, separator, /Extract)	; Break filename at dotsRun_name=subsubstrings[0]						; Run_name is leading piece of "filename"num_vars=data_in.num_varsobjects=OBJARR(num_vars)						; Create object arrayFOR ivar=0,num_vars-1 DO BEGIN	var_structure=data_in.vars[ivar]	num_dims=var_structure.num_dims	IF (num_dims eq 1) THEN BEGIN				; Get signal data from data_in structure		signal_data={GKVs1D}					; Create named structure		signal_data.mnemonic	= var_structure.var_name		signal_data.Title	= StringClean(var_structure.plot_title)		indices = Replicate('*', num_dims)		; Create string array, and load with "*"'s		signal_data.Indices	= PTR_NEW(indices)	;	store result in signal_data;		signal_data.units	= ???				; NEED to get signal units from pg3eq!!!		signal_data.values	= var_structure.values		vmin = GKVsd_MIN(*var_structure.values, MAX=vmax)		signal_data.vrange	= [vmin, vmax]		; Range of data values within Plot Window		signal_data.CodeName	= "pg3eq"			; CodeName is ALWAYS pg3eq for this function		signal_data.CodePI 	= "A. Dimits"		; pg3eq PI is Dimits		signal_data.RunID 	= Run_name			; RunID stripped out of "filename"		signal_data.FileID	= filename			; FileID is filename (with directories stripped out)		xmin=MIN(*var_structure.grids[0].grid)		xmax=MAX(*var_structure.grids[0].grid)		imax=N_ELEMENTS(*var_structure.grids[0].grid) - 1		signal_data.Grid1.mnemonic	= var_structure.grids[0].grid_label		signal_data.Grid1.title	= StringClean(var_structure.grids[0].grid_label)		signal_data.Grid1.units	= StringClean(var_structure.grids[0].grid_units)		signal_data.Grid1.values	= var_structure.grids[0].grid		signal_data.Grid1.boundary	= "open"		; time-dimension is "open"		signal_data.Grid1.range	= [xmin, xmax]		signal_data.Grid1.irange	= [0, imax];;  Register object, and store in object array;		objects[ivar]=Obj_New("GKVs1D", signal_data)	ENDIF 	IF (num_dims eq 2) THEN BEGIN		signal_data={GKVs2D}					; Get signal data from data_in structure		signal_data.mnemonic	= var_structure.var_name		signal_data.Title	= StringClean(var_structure.plot_title)		indices = Replicate('*', num_dims)		; Create string array, and load with "*"'s		signal_data.Indices	= PTR_NEW(indices)	;	store result in signal_data;		signal_data.units	= ???				; NEED to get signal units from pg3eq!!!		signal_data.values	= var_structure.values		vmin = GKVsd_MIN(*var_structure.values, MAX=vmax)		signal_data.vrange	= [vmin, vmax]		; Range of data values within Plot Window		signal_data.CodeName	= "pg3eq"			; CodeName is ALWAYS pg3eq for this function		signal_data.CodePI 	= "A. Dimits"		; pg3eq PI is Dimits		signal_data.RunID 	= Run_name			; RunID stripped out of "filename"		signal_data.FileID	= filename			; FileID is filename (with directories stripped out)		xmin=MIN(*var_structure.grids[0].grid)		xmax=MAX(*var_structure.grids[0].grid)		imax=N_ELEMENTS(*var_structure.grids[0].grid) - 1		signal_data.Grid1.mnemonic	= var_structure.grids[0].grid_label		signal_data.Grid1.title		= StringClean(var_structure.grids[0].grid_label)		signal_data.Grid1.units		= StringClean(var_structure.grids[0].grid_units)		signal_data.Grid1.values	= var_structure.grids[0].grid		signal_data.Grid1.boundary	= "periodic (open)"		signal_data.Grid1.range		= [xmin, xmax]		signal_data.Grid1.irange	= [0, imax]		ymin=MIN(*var_structure.grids[1].grid)		ymax=MAX(*var_structure.grids[1].grid)		jmax=N_ELEMENTS(*var_structure.grids[1].grid) - 1		signal_data.Grid2.mnemonic	= var_structure.grids[1].grid_label		signal_data.Grid2.title	= StringClean(var_structure.grids[1].grid_label)		signal_data.Grid2.units	= StringClean(var_structure.grids[1].grid_units)		signal_data.Grid2.values	= var_structure.grids[1].grid		signal_data.Grid2.boundary	= "open"			; time-dimension is "open"		signal_data.Grid2.range	= [ymin, ymax]		signal_data.Grid2.irange	= [0, jmax];;  Register object, and store in object array;		objects[ivar]=Obj_New("GKVs2D", signal_data)	ENDIF 	IF (num_dims eq 3) THEN BEGIN		signal_data={GKVs3D}					; Get signal data from data_in structure		signal_data.mnemonic	= var_structure.var_name		signal_data.Title	= StringClean(var_structure.plot_title)		indices = Replicate('*', num_dims)		; Create string array, and load with "*"'s		signal_data.Indices	= PTR_NEW(indices)	;	store result in signal_data;		signal_data.units	= ???				; NEED to get signal units from pg3eq!!!		signal_data.values	= var_structure.values		vmin = GKVsd_MIN(*var_structure.values, MAX=vmax)		signal_data.vrange	= [vmin, vmax]		; Range of data values within Plot Window		signal_data.CodeName	= "pg3eq"			; CodeName is ALWAYS pg3eq for this function		signal_data.CodePI 	= "A. Dimits"		; pg3eq PI is Dimits		signal_data.RunID 	= Run_name			; RunID stripped out of "filename"		signal_data.FileID	= filename			; FileID is filename (with directories stripped out)		ymin=MIN(*var_structure.grids[0].grid)		ymax=MAX(*var_structure.grids[0].grid)		imax=N_ELEMENTS(*var_structure.grids[0].grid) - 1		signal_data.Grid1.mnemonic	= var_structure.grids[0].grid_label		signal_data.Grid1.title	= StringClean(var_structure.grids[0].grid_label)		signal_data.Grid1.units	= StringClean(var_structure.grids[0].grid_units)		signal_data.Grid1.values	= var_structure.grids[0].grid		signal_data.Grid1.boundary	= "periodic (open)"		signal_data.Grid1.range	= [ymin, ymax]		signal_data.Grid1.irange	= [0, imax]		xmin=MIN(*var_structure.grids[1].grid)		xmax=MAX(*var_structure.grids[1].grid)		jmax=N_ELEMENTS(*var_structure.grids[1].grid) - 1		signal_data.Grid2.mnemonic	= var_structure.grids[1].grid_label		signal_data.Grid2.title	= StringClean(var_structure.grids[1].grid_label)		signal_data.Grid2.units	= StringClean(var_structure.grids[1].grid_units)		signal_data.Grid2.values	= var_structure.grids[1].grid		signal_data.Grid2.boundary	= "periodic (open)"		signal_data.Grid2.range	= [xmin, xmax]		signal_data.Grid2.irange	= [0, jmax]		zmin=MIN(*var_structure.grids[2].grid)		zmax=MAX(*var_structure.grids[2].grid)		kmax=N_ELEMENTS(*var_structure.grids[2].grid) - 1		signal_data.Grid3.mnemonic	= var_structure.grids[2].grid_label		signal_data.Grid3.title	= StringClean(var_structure.grids[2].grid_label)		signal_data.Grid3.units	= StringClean(var_structure.grids[2].grid_units)		signal_data.Grid3.values	= var_structure.grids[2].grid		signal_data.Grid3.boundary	= "open"			; time-dimension is "open"		signal_data.Grid3.range	= [zmin, zmax]		signal_data.Grid3.irange	= [0, kmax];;  Register object, and store in object array;		objects[ivar]=Obj_New("GKVs3D", signal_data)	ENDIF 	IF (num_dims eq 4) THEN BEGIN		signal_data={GKVs4D}					; Get signal data from data_in structure		signal_data.mnemonic	= var_structure.var_name		signal_data.Title	= StringClean(var_structure.plot_title)		indices = Replicate('*', num_dims)		; Create string array, and load with "*"'s		signal_data.Indices	= PTR_NEW(indices)	;	store result in signal_data;		signal_data.units	= ???				; NEED to get signal units from pg3eq!!!		signal_data.values	= var_structure.values		vmin = GKVsd_MIN(*var_structure.values, MAX=vmax)		signal_data.vrange	= [vmin, vmax]		; Range of data values within Plot Window		signal_data.CodeName	= "pg3eq"			; CodeName is ALWAYS pg3eq for this function		signal_data.CodePI 	= "A. Dimits"		; pg3eq PI is Dimits		signal_data.RunID 	= Run_name			; RunID stripped out of "filename"		signal_data.FileID	= filename			; FileID is filename (with directories stripped out)		xmin=MIN(*var_structure.grids[0].grid)		xmax=MAX(*var_structure.grids[0].grid)		imax=N_ELEMENTS(*var_structure.grids[0].grid) - 1		signal_data.Grid1.mnemonic	= var_structure.grids[0].grid_label		signal_data.Grid1.title	= StringClean(var_structure.grids[0].grid_label)		signal_data.Grid1.units	= StringClean(var_structure.grids[0].grid_units)		signal_data.Grid1.values	= var_structure.grids[0].grid		signal_data.Grid1.boundary	= "open"		; time-dimension is "open"		signal_data.Grid1.range	= [xmin, xmax]		signal_data.Grid1.irange	= [0, imax]		ymin=MIN(*var_structure.grids[1].grid)		ymax=MAX(*var_structure.grids[1].grid)		jmax=N_ELEMENTS(*var_structure.grids[1].grid) - 1		signal_data.Grid2.mnemonic	= var_structure.grids[1].grid_label		signal_data.Grid2.title	= StringClean(var_structure.grids[1].grid_label)		signal_data.Grid2.units	= StringClean(var_structure.grids[1].grid_units)		signal_data.Grid2.values	= var_structure.grids[1].grid		signal_data.Grid2.boundary	= "open"			; time-dimension is "open"		signal_data.Grid2.range	= [ymin, ymax]		signal_data.Grid2.irange	= [0, jmax]		zmin=MIN(*var_structure.grids[2].grid)		zmax=MAX(*var_structure.grids[2].grid)		kmax=N_ELEMENTS(*var_structure.grids[1].grid) - 1		signal_data.Grid3.mnemonic	= var_structure.grids[2].grid_label		signal_data.Grid3.title	= StringClean(var_structure.grids[2].grid_label)		signal_data.Grid3.units	= StringClean(var_structure.grids[2].grid_units)		signal_data.Grid3.values	= var_structure.grids[2].grid		signal_data.Grid3.boundary	= "open"			; time-dimension is "open"		signal_data.Grid3.range	= [zmin, zmax]		signal_data.Grid3.irange	= [0, kmax]		tmin=MIN(*var_structure.grids[3].grid)		tmax=MAX(*var_structure.grids[3].grid)		lmax=N_ELEMENTS(*var_structure.grids[1].grid) - 1		signal_data.Grid4.mnemonic	= var_structure.grids[0].grid_label		signal_data.Grid4.title	= StringClean(var_structure.grids[3].grid_label)		signal_data.Grid4.units	= StringClean(var_structure.grids[3].grid_units)		signal_data.Grid4.values	= var_structure.grids[3].grid		signal_data.Grid4.boundary	= "open"			; time-dimension is "open"		signal_data.Grid4.range	= [tmin, tmax]		signal_data.Grid4.irange	= [0, lmax];;  Register object, and store in object array;		objects[ivar]=Obj_New("GKVs4D", signal_data)	ENDIF ENDFOR;; Pack data objects into structure using mnemonics as tag names;command_string="structure={ "						; set up command_stringFOR ivar=0,num_vars-1 DO BEGIN						; ivar_string is a string containing	ivar_string=STRING(FORMAT='(I2)',ivar)			; value of ivar (in ascii)	command_string=	command_string + 			$				data_in.vars[ivar].var_name + 	$	; tag_name:objects[ivar]				":" + "objects[" + ivar_string + "]"	IF(ivar LT num_vars-1) THEN 				$	; If not last object, then				command_string= command_string + ", "	; add comma (as the delimiter between tag definitions) ENDFORcommand_string=command_string + "}"					; close bracket at end of structure definition statementOK=EXECUTE(command_string)							; Execute command_string (thereby creating structure)RETURN, structureEND 	