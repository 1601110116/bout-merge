FUNCTION GKVs1D::ChiAvg, nBins=n_bins;; Computes the average of Chi over "nBins" equally spaced; radial bins;;  Keywords;;	nBins	Number of radial bins. Defaults to 5.  ;		(Optional);; Written by W.M. Nevins;	10/3/03; ; parse command line;nBins=5IF(N_ELEMENTS(n_bins) EQ 1) THEN nBins=n_bins;; get radial grid;rGrid = self.Grid1rValues = *(rGrid.values)iRangeIn = rGrid.irangerMin = MIN(rValues, MAX=rMax)rWidth = rMax - rMindr = rWidth/nBins;; Compute average over each bin;avgArr = OBJARR(nBins)FOR i=0, nBins-1 DO avgArr[i] = self -> Avg( axis=1, range = [rMin+i*dr, rMin+(i+1)*dr] );; Create ChiAvg object;rValues = FLTARR(nBins)FOR i=0, nBins-1 DO rValues[i] = rmin + (i+0.5)*drselfInfo = SIZE(*self.Values)resultInfo = selfInforesultInfo[1] = nBinsresultValues = MAKE_ARRAY(SIZE=resultInfo)nDims = selfInfo[0]CASE nDims OF	1  :	FOR i=0, nBins-1 DO resultValues[i]       = *(avgArr[i]).values	2  :	FOR i=0, nBins-1 DO resultValues[i, *]    = *(avgArr[i]).values	3  :	FOR i=0, nBins-1 DO resultValues[i, *, *] = *(avgArr[i]).valuesENDCASEavgChi = self -> MakeCopy(/NoErrorBars, /NoValues)avgChi.Values = PTR_NEW(resultValues)avgChi.title = '!12<!x' + self.title + '!12>!X!D!4d!Xr!N'avgChi.mnemonic = 'Avg_' + self.mnemonicFORWARD_FUNCTION GKVsd_MINvMin = GKVsd_MIN(resultValues, MAX=vMax)avgChi.vrange = [vMin, vMax]rGrid = avgChi.Grid1PTR_FREE, rGrid.valuesrGrid.values = PTR_NEW(rValues)rGrid.range=[rMin, rMax]rGrid.irange=[0,nBins-1]avgChi.Grid1=rGrid;; Set irange of 'self' back to input value;self -> Set, axis=1, irange=irangeIn;; Create output structure;result = CREATE_STRUCT('Name', 'ChiAvg', 'ChiAvg', avgChi, 'ChiAvgArr', avgArr)RETURN, resultEND  ; ****** FUNCTION GKVs1D::ChiAvg ****** ;FUNCTION GKVs1D::ChiAvg_t, tStart=t_start, t=t;; Compute time averages (AND errorbars) of avgchi over ; interval from tStart to end of data, together; with average over first and  second halfs of ; the data (and errorbars).;;  Keywords;;	tStart	Time averages are computed between 'tStart' and the end;		of the data.  Should be chosen to be (just) past initial;		transient.  Defaults to 200 (Optional).;;	t	Alternatively, set 't' to a two-element  array, where;		the first element specifies the beginning of the (full);		interval to be averaged over and the second element ;		specifies the end of this interval;; Written by W.M. Nevins;	10/3/03; ; parse command line;;tStart = 200.IF(N_ELEMENTS(t_start) EQ 1) THEN tStart=t_startIF(N_ELEMENTS(t)       EQ 2) THEN tStart=t[0]    ;nDims = Self -> NumDims()CASE nDims OF	1  :	tGrid = self.grid1	2  :	tGrid = self.grid2	ELSE :	BEGIN			MESSAGE, 'Not implimented in more than two dimensions', /INFORMATIONAL			RETURN, 0		ENDENDCASEtEnd = MAX(*tGrid.values)IF(N_ELEMENTS(t) EQ 2) THEN tEnd=t[1]temp = Self -> MakeCopy()temp -> SignalWindow, axis=nDims, range=[tStart, tEnd]temp -> restricttAvg = temp -> avg_t()temp -> TrashtMid = 0.5*(tStart + tEnd)temp = Self -> MakeCopy()temp -> SignalWindow, axis=nDims, range=[tStart, tMid]temp -> restricttAvg1 = temp -> avg_t()temp -> Trashtemp = Self -> MakeCopy()temp -> SignalWindow, axis=nDims, range=[tMid, tEnd]temp -> restricttAvg2 = temp -> avg_t()temp -> Trashresult = CREATE_STRUCT('Name', 'Chi_Avg_t', 't', [tStart, tEnd], 'Avg', tAvg, 'Avg_1', tAvg1, 'Avg_2', tAvg2)RETURN, resultEND  ; ****** FUNCTION GKVs1D::ChiAvg_t ****** ;			