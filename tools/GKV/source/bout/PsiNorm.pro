PRO PsiNorm, Obj, const = Const;;	Purpose:;;		This proceedure rescales the radial grid for BOUT;		GKVsd objects such that the units are Psi_n;		instead of rho_s;;	Arguments:;;				Obj		(required) A GKVsd object containg BOUT data;						On entry this object is assumed to have the radial;						grid scaled to  rho_s.  On return the radial grid is ;						scaled to Psi_n.;;	KeyWords:;;			Const		(optional)  Psi_n is assumed to be related to 'x' by ;						Psi_n = 1 + Const*x.  Const defaults to 3.37e-3.;;  Written by WlM. Nevins;	7/15/00;; Check that there is a grid with mnemonic 'x' present;Iaxis = 0iaxis = Obj -> AxisNumber('x')IF(iaxis EQ 0) THEN BEGIN	MESSAGE, "No x-Grid found", /INFORMATIONAL	RETURNENDIFconstant = 3.37e-3IF(KEYWORD_SET(const)) THEN constant=constObj -> ScaleAxis, iaxis, OffSet = 1., Const=constant, Units='', title='!4w!X!In!N', mnemonic = 'Psi_n'returnEND ; ****** PsiNorm ****** ;PRO XNorm, Obj, Const;;	Purpose:;;		This proceedure rescales the radial grid for BOUT;		GKVsd objects such that the units are rho_s;		instead of Psi_n;;	Arguments:;;				Obj		(required) A GKVsd object containg BOUT data;						On entry this object is assumed to have the radial;						grid scaled to Psi_n.  On return the radial grid is ;						scaled to rho_s.;;	KeyWords:;;			Const		(optional)  Psi_n is assumed to be related to 'x' by ;						Psi_n = 1 + Const*x.  Const defaults to 3.37e-3.;;  Written by WlM. Nevins;	7/15/00;; Check that there is a grid with mnemonic 'xl present;Iaxis = 0iaxis = Obj -> AxisNumber('Psi_n')IF(iaxis EQ 0) THEN BEGIN	MESSAGE, "No Psi_n-Grid found", /INFORMATIONAL	RETURNENDIFconstant = 3.37e-3IF(KEYWORD_SET(const)) THEN constant=constc = 1./constantoff = -1./constantObj -> ScaleAxis, iaxis, OffSet = off, Const=c, Units='!4q!X!Is!N', title='x', mnemonic = 'x'returnEND ; ****** XNorm ****** ;FUNCTION  Gamma, dPhi=dPhi, dNi=dNi, Omega_ci=Wci, C_s=cs, N_i0=ni0;; 	Purpose:;;		This function returns the particle flux vs.;		frequency.  Gamma is computed  from ;		dPhi (the deviations of the potential from ;		its z-average) and dNi (the deviations of;		 the ion density from its z-average).;;	Arguments:;;				None.;;	Keywords:;;				dPhi		A GKVsd object containing the deviations of;						the potential from its z-average on a fixed flux;						surface vs. time and z. (REQUIRED);;				dNi		A GKVsd object containing the deviations of;						the ion densityl from its z-average on a fixed flux;						surface vs. time and z. (REQUIRED);;			Omega_ci	The ion cyclotron frequency in radians/second.  ;						Defaults to 6.8e7 Hz. (Optional);;				C_s		The ion sound speed in cm/s.;						Defaults to 9.5e6 cm/s. (Optional);;				N_i0		The reference  ion density.;						Defaults to 2.75e13/cm^3.;						(Optional);			;; Written by W.M. Nevins;	7/15/00;; First form the z-component of the electric field;E_z = dPhi -> DbyD('z'); E_z = E_z -> Times(-1.); ;  Now form gamma vs. omega using Xspect;gamma_omega_k = E_z -> Xspect(ref=dNi);; Integrate over k_z to obtain Gamma vs. omega;gamma_omega_k -> get, axis=1, range=krangegamma_omega =  gamma_omega_k -> Avg(axis=1)gamma_omega = gamma_omega -> times( krange[1] - krange[0] );; Now rescale the frequency axis to Hz from Omega_ci;Omega_ci = 6.8e7IF(KEYWORD_SET(Wci)) THEN Omega_ci = Wcigamma_omega -> ScaleAxis, 'omega', Const = Omega_ci/(2.*!PI), Units='Hz', Title='f', Mnemonic='f';; Now rescale the values of Gamma_omega to cm^-2;c_s = 9.5e6IF(KEYWORD_SET(cs)) THEN c_s = csn_i0 = 2.75e13IF(KEYWORD_SET(ni0)) THEN n_i0 = ni0scale = (2.*!PI/Omega_ci)*n_i0*c_sgamma = gamma_omega -> times(scale)gamma -> set, Title='!4C!X!Ip!N', Mnemonic='Gamma', Units='arbitrary units';; There is some problem with the normalization from 'xspect'.  Not time to fix this now,; so just describe as 'aritrary units'.;RETURN, gammaEND ; ****** Gamma ****** ;PRO t_to_sec, Obj, Omega_ci=Wci;;	Purpose:;;		This proceedure transforms the time axis;		from units of (1/Omega_ci) to seconds.;;	Arguments:;;				Obj		(required) A GKVsd object containing BOUT data.;						On entry this object is assumed to have the time;						grid scaled to 1/Omega_ci.  On return the time grid is ;						scaled to seconds.;;	Keywords:;;				Omega_ci	The ion cyclotron frequency in radians/second.;						Defaults to 6.8e7 Hz.   (Optional);;  Written by W.M. Nevins;	7/15/00;; Check that there is a grid with mnemonic 't'  present;'Iaxis = 0iaxis = Obj -> AxisNumber('t')IF(iaxis EQ 0) THEN BEGIN	MESSAGE, "No t-Grid found", /INFORMATIONAL	RETURNENDIFOmega_ci = 6.8e7IF(KEYWORD_SET(Wci)) THEN Omega_ci = Wciconstant = 1./Omega_ciObj -> ScaleAxis, iaxis, Const=constant, Units='s', title='t', mnemonic = 't'returnEND ; ****** t_to_sec ****** ;PRO t_from_sec, Obj, Omega_ci=Wci;;	Purpose:;;		This proceedure transforms the time axis;		from units of seconds to (1/Omega_ci).;;	Arguments:;;				Obj		(Required) A GKVsd object containing BOUT data.;						On entry this object is assumed to have the time;						grid scaled to seconds.  On return the time grid is ;						scaled to 1/Omega_ci.;;	Keywords:;;				Omega_ci	The ion cyclotron frequency in radians/second.;						Defaults to 6.8e7 Hz.   (Optional);;  Written by W.M. Nevins;	7/15/00;; Check that there is a grid with mnemonic 't'  present;Iaxis = 0iaxis = Obj -> AxisNumber('t')IF(iaxis EQ 0) THEN BEGIN	MESSAGE, "No t-Grid found", /INFORMATIONAL	RETURNENDIFOmega_ci = 6.8e7IF(KEYWORD_SET(Wci)) THEN Omega_ci = Wciconstant = Omega_ciObj -> ScaleAxis, iaxis, Const=constant, Units='1/!4X!X!Ici!N', title='t', mnemonic = 't'returnEND ; ****** t_from_sec ****** ;PRO Omega_from_Hz, Obj, Omega_ci=Wci;;	Purpose:;;		This proceedure transforms the frequency axis;		from units of Hz to units of Omega_ci.;;	Arguments:;;				Obj		(Required) A GKVsd object containing BOUT data.;						On entry this object is assumed to have the frequency;						grid scaled to Hz.  On return the frequency grid is ;						scaled to Omega_ci.;;	Keywords:;;				Omega_ci	The ion cyclotron frequency in radians/second.;						Defaults to 6.8e7 Hz.   (Optional);;  Written by W.M. Nevins;	7/15/00;; Check that there is a grid with mnemonic 'f'  present;Iaxis = 0iaxis = Obj -> AxisNumber('f')IF(iaxis EQ 0) THEN BEGIN	MESSAGE, "No f-Grid found", /INFORMATIONAL	RETURNENDIFOmega_ci = 6.8e7IF(KEYWORD_SET(Wci)) THEN Omega_ci = Wciconstant = (2.*!PI)/Omega_ciObj -> ScaleAxis, iaxis, Const=constant, Units='!4X!X!Ici!N', title='!4x!x', mnemonic = 'omega';; Objects vs. frequency are generally intensive... so we need to scale values as well;Obj = Obj -> Over(constant)returnEND ; ****** Omega_from_Hz ****** ;PRO Omega_to_Hz, Obj, Omega_ci=Wci;;	Purpose:;;		This proceedure transforms the frequency axis;		from units of Omega_ci to units of Hz.;;	Arguments:;;				Obj		(Required) A GKVsd object containing BOUT data.;						On entry this object is assumed to have the frequency;						grid scaled to Omega_ci.  On return the frequency grid is ;						scaled to Hz.;;	Keywords:;;				Omega_ci	The ion cyclotron frequency in radians/second.;						Defaults to 6.8e7 Hz.   (Optional);;  Written by W.M. Nevins;	7/15/00;; Check that there is a grid with mnemonic 'omega'  present;Iaxis = 0iaxis = Obj -> AxisNumber('omega')IF(iaxis EQ 0) THEN BEGIN	MESSAGE, "No omega-Grid found", /INFORMATIONAL	RETURNENDIFOmega_ci = 6.8e7IF(KEYWORD_SET(Wci)) THEN Omega_ci = Wciconstant = Omega_ci/(2.*!PI)Obj -> ScaleAxis, iaxis, Const=constant, Units='Hz', title='f', mnemonic = 'f';; Objects vs. frequency are generally intensive... so we need to scale values as well;Obj = Obj -> Over(constant)returnEND ; ****** Omega_to_Hz ****** ;PRO z_to_cm, Obj, rho_s=rho;;	Purpose:;;		This proceedure transforms the 'z' axis;		from unit of rho_s to units of cm.;;	Arguments:;;				Obj		(Required) A GKVsd object containing BOUT data.;						On entry this object is assumed to have the z;						grid scaled to rho_s.  On return the z grid is ;						scaled to cm.  Defaults to 0.152 cm.;;	Keywords:;;				rho_s		(optional) The value of rho_s (the 'ion-sound radius');						in cm.;;  Written by W.M. Nevins;	7/15/00;; Check that there is a grid with mnemonic 'z'  present;Iaxis = 0iaxis = Obj -> AxisNumber('z')IF(iaxis EQ 0) THEN BEGIN	MESSAGE, "No z-Grid found", /INFORMATIONAL	RETURNENDIFrho_s = 0.152IF(KEYWORD_SET(rho)) THEN rho_s=rhoconstant = rho_sObj -> ScaleAxis, iaxis, Const=constant, Units='cm', title='z', mnemonic = 'z'returnEND ; ****** z_to_cm ****** ;PRO z_to_rho, Obj, rho_s=rho;;	Purpose:;;		This proceedure transforms the 'z' axis;		from unit of cm to units of rho_s.;;	Arguments:;;				Obj		(Required) A GKVsd object containing BOUT data.;						On entry this object is assumed to have the z;						grid scaled to cm.  On return the z grid is ;						scaled to rho_s.;;	Keywords:;;				rho_s		(optional) The value of rho_s (the 'ion-sound radius');						in cm.  Defaults to 0.152 cm.;;  Written by W.M. Nevins;	7/15/00;; Check that there is a grid with mnemonic 'z'  present;Iaxis = 0iaxis = Obj -> AxisNumber('z')IF(iaxis EQ 0) THEN BEGIN	MESSAGE, "No z-Grid found", /INFORMATIONAL	RETURNENDIFrho_s = 0.152IF(KEYWORD_SET(rho)) THEN rho_s=rhoconstant = 1./rho_sObj -> ScaleAxis, iaxis, Const=constant, Units='!4q!X!Is!N', title='z', mnemonic = 'z'returnEND ; ****** z_to_cm ****** ;PRO x_to_cm, Obj, rho_s=rho;;	Purpose:;;		This proceedure transforms the 'x' axis;		from unit of rho_s to units of cm.;;	Arguments:;;				Obj		(Required) A GKVsd object containing BOUT data.;						On entry this object is assumed to have the x;						grid scaled to rho_s.  On return the x grid is ;						scaled to cm.  Defaults to 0.152 cm.;;	Keywords:;;				rho_s		(optional) The value of rho_s (the 'ion-sound radius');						in cm.;;  Written by W.M. Nevins;	7/15/00;; Check that there is a grid with mnemonic 'x'  present;Iaxis = 0iaxis = Obj -> AxisNumber('x')IF(iaxis EQ 0) THEN BEGIN	MESSAGE, "No x-Grid found", /INFORMATIONAL	RETURNENDIFrho_s = 0.152IF(KEYWORD_SET(rho)) THEN rho_s=rhoconstant = rho_sObj -> ScaleAxis, iaxis, Const=constant, Units='cm', title='x', mnemonic = 'x'returnEND ; ****** x_to_cm ****** ;PRO x_to_rho, Obj, rho_s=rho;;	Purpose:;;		This proceedure transforms the 'x' axis;		from unit of cm to units of rho_s.;;	Arguments:;;				Obj		(Required) A GKVsd object containing BOUT data.;						On entry this object is assumed to have the x;						grid scaled to cm.  On return the x grid is ;						scaled to rho_s.;;	Keywords:;;				rho_s		(optional) The value of rho_s (the 'ion-sound radius');						in cm.  Defaults to 0.152 cm.;;  Written by W.M. Nevins;	7/15/00;; Check that there is a grid with mnemonic 'x'  present;Iaxis = 0iaxis = Obj -> AxisNumber('x')IF(iaxis EQ 0) THEN BEGIN	MESSAGE, "No x-Grid found", /INFORMATIONAL	RETURNENDIFrho_s = 0.152IF(KEYWORD_SET(rho)) THEN rho_s=rhoconstant = 1./rho_sObj -> ScaleAxis, iaxis, Const=constant, Units='!4q!X!Is!N', title='x', mnemonic = 'x'returnEND ; ****** x_to_cm ****** ;	