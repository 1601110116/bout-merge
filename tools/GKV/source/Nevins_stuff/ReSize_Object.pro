Pro ReSize_Object_Resize, event  Widget_Control,   event.top, Get_UValue=info, /No_Copy Widget_Control,   info.drawID, Draw_XSize=event.x > 200, $                   Draw_YSize=event.y > 200 info.object -> Draw, _Extra=info.extra Widget_Control, event.top, Set_UValue=info, /No_Copy end  Pro Resize_Object_CleanUp, tlb  end Pro Resize_Object_Quit, event    Widget_control, event.top, /Destroy    ; Destroy widget structure end  Pro ReSize_Object_Colors, event ; ; Change color table ; Widget_Control, event.top, Get_UValue=info      ; Get UValues  thisEvent=Tag_Names(event, /Structure_Name) CASE thisevent of    'WIDGET_BUTTON'   : Begin       ncolors=0   ; Basically, these are here to be sure that this       wID=-1      ; routine allocates memory for 'ncolors' and 'wID'       info.object -> GetProperties, Nlevels=ncolors, WID=wID       XColors, NColors=ncolors,  $  ; Change Color Table                Group_Leader=event.top, NotifyID=[event.id, event.top], $                Title='ChangeColors' + '(' + StrTrim(wID,2) + ')'                         end     'XCOLORS_LOAD'    :  Begin      info.object -> SetProperties, colorTable=event.index     info.object -> Draw, _Extra=info.extra                        end ENDCASE  end Pro ReSize_Object_PostScript, event; ; output image as postscript file ;Widget_Control, event.top, Get_UValue=info, /No_Copy        ; Get user info keys=ps_form(Cancel=cancelled, filename='joe.ps')           ; use PS_Form to define PostScript file if cancelled then return thisDevice=!D.name set_plot, 'ps'                                              ; Make current device Device, _extra=keys                                         ; a PostScript file wID=-1 							; set non-zero value so that GetProperties will return correct wIDinfo.object -> GetProperties, WID=wID		; Get current window IDinfo.object -> SetProperties, WID=-1		; Set window ID to -1 (to avoid call to WSet in DRAW proceedure)info.object -> Draw, _Extra=info.extra	; Draw image to postscript device	Device, /close_file             		; Close PostScript file set_plot, thisDevice             		; Replace original 'device' info.object -> Setproperties, WID=wID		; Reset window IDWidget_Control, event.top, Set_Uvalue=info, /No_Copy        ; Return user info end  Pro ReSize_Object_GIF, event; ; output image as GIF file; filename=Dialog_PickFile(/write, File='ReSize_Object.gif')      ; Get filename if filename eq "" then return                               	; Return if no filename supplied Widget_Control, event.top, Get_UValue=info, /No_Copy        	; Get user info Device, Get_Visual_Depth=thisDepth                          	; Check visual depth if thisDepth gt 8 then begin    image24=TvRD(True=1)    image2D=Color_Quan(image24,1,r,g,b) ENDIF ELSE BEGIN    image2d=TvRd()   TvLct, r, g, b, /get ENDELSE Write_Gif, filename, image2D, r, g, b Widget_Control, event.top, Set_Uvalue=info, /No_Copy        ; Return user info end   Pro ReSize_Object_JPEG, event; ; output image as JPEG file; filename=Dialog_PickFile(/write, File='ReSize_Object.jpg')      ; Get filename if filename eq "" then return                               	; Return if no filename supplied Widget_Control, event.top, Get_UValue=info, /No_Copy        	; Get user info Device, Get_Visual_Depth=thisDepth                          	; Check visual depth if thisDepth gt 8 then begin    image24=TvRD(True=1)                                     	; 24 (or 32) bit system endif ELSE Begin    Snap=TvRD()                                              	; bit system    s=Size(snap, /Dimensions)   TvLct, r, g, b, /get     image24=BytArr( 3, s[0], s[1])    image24[0,*,*]=r[snap]    image24[1,*,*]=g[snap]    image24[2,*,*]=b[snap] ENDELSE Write_JPEG, filename, image24, True=1, Quality=75           ; write figure to JPEG file Widget_Control, event.top, Set_Uvalue=info, /No_Copy        ; Return user info end Pro ReSize_Object_Print, event ; ; Send processed image to printer...but doesn't really work ; because printer doesn't understand !P.MULTI ; ok=Dialog_PrinterSetup() if ok eq 0 then return Widget_Control, event.top, Get_UValue=info, /No_Copy        ; Get user info Widget_Control, event.top, /HourGlass thisDevice=!D.namewID=-1 							; set non-zero value so that GetProperties will return correct wIDinfo.object -> GetProperties, WID=wID		; Get current window IDinfo.object -> SetProperties, WID=-1		; Set window ID to -1 (to avoid call to WSet in DRAW proceedure)key=Ps_Form()						; Bring up PS_Form Set_Plot, 'ps' Device, _Extra=key info.object -> Draw, _Extra=info.extraDevice, /Close Set_Plot, thisDevice info.object -> Setproperties, WID=wID		; Reset window IDWidget_Control, event.top, Set_Uvalue=info, /No_Copy        ; Return user info end    Pro ReSize_Object, object, Group_Leader=group, _Extra=extra ; ; Resizable graphics window for any object which ; has a "Draw" method ; if N_Elements(object) eq 0 then begin    ok=dialog_message('Resize_Object:  must pass an Object as the parameter')    Return endif if N_Elements(extra) EQ 0 then extra={null:0}tlb=Widget_Base(column=1, /TLB_SIZE_Events, MBar=menuID, Title='Resizeable Object Display') ; ; Create pull-down menus ;    fileID=Widget_Button(menuID, Value='File')    ; add items to file menu here...     ;  put a "save as" button on FILE menu          saveID=Widget_Button(fileID, Value='Save as ...', /Menu)          ; Add "children" to 'save as' button..          postscriptID=Widget_Button(saveID, Value='PostScript', Event_Pro='ReSize_Object_Postscript')          gifID=Widget_Button(saveID, Value='GIF', Event_Pro='ReSize_Object_GIF')          jpegID=Widget_Button(saveID, Value='JPEG', Event_Pro='ReSize_Object_JPEG')      ;  put a "print" button in the FILE menu          printID=Widget_Button(fileID, Value='Print...', Event_Pro='ReSize_Object_Print')    ;  put 'quit' button on FIlE menu          quitID=Widget_Button(FileID, Value='Quit', /Separator, Event_Pro='ReSize_Object_Quit')    ;    colorID=Widget_Button(menuID, Value='Color')       image_ID=Widget_Button(colorID, Value='Image Colors', Event_Pro='ReSize_Object_Colors') ; drawID=Widget_Draw(tlb, XSize=400, YSize=400) ; ; Draw object into draw widget ; Widget_Control, tlb, /Realize			; Put widget on screen Widget_Control, drawID, Get_Value=wID		; Get window ID of Draw Widget object -> SetProperties, WID=wID		; Set object window IDobject -> Draw,  _Extra=extra			; Draw object into Draw Widget  ; ; Make info structure to save information needed to redisplay object ; TvLct, r,g,b, /Get      ; Get current color table info={object:object, drawID:drawID, wID:wID, $       r:r, g:g, b:b, Extra:extra}  Widget_Control, tlb, Set_UValue=info, /No_Copy ; Save info structure  Xmanager,   'ReSize_Object', tlb, Event_Handler='ReSize_Object_Resize', $             /No_Block, Group_Leader=group, Cleanup="Resize_Object_CleanUp"  end