FUNCTION GKVs1D::WvsT_fft, debug=debug, _EXTRA=Extra;; Purpose:;;	Use MEM analysis to create GKVs2D object ;	illustrating how the signal frequencies ;	evolve with time;; Written by W.M. Nevins;	1/2/02;copy = self -> MakeCopy()irange = copy.grid1.irangenPoints = irange[1] - irange[0] + 1nSub1 = FIX(SQRT(nPoints)) nSub2 = nPoints/100 > 10nSub = nSub1 > nSub2result = GetKeyWord('nSub', Extra)IF(Query_Integer(result)) THEN nSub=resultnCrement = nSub/2 > 1nts = nPoints/nCrement - 2nOmegas = nPointstGrid = copy.grid1tGrid = GKVsd_GRIDCOPY(tGrid)oldtValues = *tGrid.valuesnewtValues = FLTARR(nts-1);; Get first MEM spectral dennsity;imin=irange[0]imax=imin+nSub-1copy -> signalwindow, axis=1, irange=[imin, imax]SpectObj = copy -> xspect()wGrid = spectObj.grid1wGrid = GKVsd_GRIDCOPY(wGrid)spectPtr = spectObj -> GetValues()spect = *spectPtrnOmegas = N_ELEMENTS(spect)values = FLTARR(nts-1, nOmegas)values[0,*] = spectGKVdelete, spectObjnewTvalues[0] = 0.5*(oldtValues[imin] + oldtValues[imax]);; Loop to get remaining spectral densities;FOR i=1, nts-2 DO BEGIN	imin = imin+nCrement+1	imax = imin+nSub-1 < irange[1]	copy -> signalwindow, axis=1, irange=[imin, imax]	spectObj = copy -> xspect()	spectPtr = spectObj.values	spect = *spectPtr	values[i,*] = spect > 0.	GKVdelete, spectObj	newTvalues[i] = 0.5*(oldtValues[imin] + oldtValues[imax])	IF(KEYWORD_SET(debug)) then print, imin, imaxENDFOR;; Create GKVs2D structure for output object;outStr = {GKVs2D}FOR i=0, N_TAGS({GKVs1D})-1 DO outStr.(i) = copy.(i)outStr.title = 'S!DMEM!N{' + copy.title + '}'outStr.mnemonic = 'S_' + copy.mnemonicoutStr.units = '(' + copy.units + ')*(' + tGrid.units + ')'indices = *copy.indicesoutStr.indices = PTR_NEW([indices, '*' ])outstr.values = PTR_NEW(values)vmin = MIN(values, MAX=vmax)outStr.vrange=[vmin,vmax];; Make new t-grid;PTR_FREE, tGrid.valuestGrid.values = PTR_NEW(newtValues)tmin = newtValues[0]tmax = newtValues[nts-2]tGrid.range=[tmin,tmax]tGrid.irange=[0,nts-2];; Load grid structures into output structure;outStr.grid1 = tGridoutStr.grid2 = wGrid;; Create output object;outObj = OBJ_NEW("GKVs2D", outStr);; clean up;copy -> trash;; and we're done ...;RETURN, outObjEND  ;  ****** GKVs1D::WvsT ******  ;	