;; *****************************************************************************************************************; ******************************************     Copyright Notice     *********************************************; *                                                                                                               *; *  This work was produced at the University of California, Lawrence Livermore National Laboratory (UC LLNL)     *; *  under contract no. W-7405-ENG-48 (Contract 48) between the U.S. Department of Energy (DOE) and The Regents   *; *  of the University of California (University) for the operation of UC LLNL. Copyright is reserved to the      *; *  University for purposes of controlled dissemination, commercialization through formal licensing, or other    *; *  disposition under terms of Contract 48; DOE policies, regulations and orders; and U.S. statutes. The rights  *; *  of the Federal Government are reserved under Contract 48 subject to the restrictions agreed upon by the DOE  * ; *  and University as allowed under DOE Acquisition Letter 97-1.                                                 *; *                                                                                                               *; *****************************************************************************************************************;; *****************************************************************************************************************; **********************************************     DISCLAIMER     ***********************************************; *                                                                                                               *; *  This work was prepared as an account of work sponsored by an agency of the United States Government.         *; *  Neither the United States Government nor the University of California nor any of their employees, makes      *; *  any warranty, express or implied, or assumes any liability or responsibility for the accuracy, completeness, *; *  or usefulness  *of any information, apparatus, product, or process disclosed, or represents that its use     *; *  would not infringe privately-owned rights.  Reference herein to any specific commercial products, process,   *; *  or service by trade name, trademark, manufacturer or otherwise does not necessarily constitute or imply its  *; *  endorsement, recommendation, or favoring by the United States Government or the University of California.    *; *  The views and opinions of authors expressed herein do not necessarily state or reflect those of the United   *; *  States Government or the University of California, and shall not be used for advertising or product          *; *  endorsement purposes.                                                                                        *; *                                                                                                               *; *****************************************************************************************************************;FUNCTION Query_Structure, arg;; Returns 1 if ARG is a STRUCTURE, 0 otherwise; (see help document for SIZE function for definition of TYPE);arg_type=SIZE(ARG, /TYPE)if (arg_type eq 8 ) then return, 1return, 0ENDFUNCTION PDFs, Event_Vol, SIZES, PARTIAL_PDF=partial_pdf, $	       		V_min=min_vol, Exponent=alpha, n_bins=nbins, $			pdf_error=pdf_error, DEBUG=d;;  This Function returns a 1-D array containing values of the ;  Probability Distribution Function (PDF) vs. event SIZE. ;  This PDF is computed from the array of event sizes, Max_Vol,;  which is contained in the STRUCTURE Event_Vol.;  Event_Vol is produced from the underlying event data by;  the function Event_Volume.;   ;  ;	SIZES		On return, SIZES is a 1-D array containg the event ;			sizes of the corresponding elements of PDF.;;	Exponent	On input, EXPONENT determines the bin spacing.  ;			For power law distributions (like size^-alpha), ;			EXPONENT should be set about equal to alpha.;			;	PARTIAL_PDF On return, PARTIAL_PDF is a 2-D array containing the ;			contributions to the total PDF from each scale in the;			filtering process.  PARTIAL_PDF[*,0] contains 1/binsize--;			essentially the noise level for the PDF at all scales.;;	V_min		On input, Min_Vol contains the minimum event volume;			to be included in the PDF.;;  Check validity of input ARRAY;IF( Query_Structure(Event_Vol) ne 1 ) then begin	Print, "Error in PDFs:  A structure is expected as 1st argument"	return, 0endifMax_vol=Event_Vol.Max_VolN_Events=Event_Vol.N_EventsIF( QUERY_REAL(Max_Vol) ne 1) then begin	Print, "ERROR in PDFs:  ARRAY is not real"	return, 0endifN_info=size(N_events)it=N_events(N_info(1)-1)V_min = max(Max_Vol)/1.e6if( KEYWORD_SET(Min_Vol) ) then V_min=Min_Volmax_vol=max_vol > V_minmax_val=MAX(max_vol)min_val=MIN(max_vol)Total_events=N_ELEMENTS(max_vol)-1n_bins=LONG(SQRT(Total_events))			if(KEYWORD_SET(nbins)) then n_bins=nbinsexponent=1.0dif KEYWORD_SET(alpha) then exponent=alpha > 1.;;  Default is logarithmic bin spacing;scaled_max_vol=alog(max_vol[1:Total_events])if (exponent ne 1.0d) then begin	alph = exponent - 1.0d	scaled_max_vol=- 1./max_vol^alphendifa_max=MAX(scaled_max_vol)a_min=MIN(scaled_max_vol)bin_size=(a_max-a_min)/(n_bins-1)pdf0=HISTOGRAM(scaled_max_vol, BINSIZE=bin_size, MAX=a_max, MIN=a_min, /NAN) if (exponent ne 1.0d) then begin	bin_boundaries = (-1.0d/(a_min+bin_size*indgen(n_bins+1)))^(1/alph)endif else begin	bin_boundaries=min_val*exp(bin_size*INDGEN(n_bins+1))endelsebin_width=bin_boundaries(1:n_bins)-bin_boundaries(0:n_bins-1)bin_centers=0.5*( bin_boundaries(1:n_bins) + bin_boundaries(0:n_bins-1) );;  Correct PDF for variable bin width ...;pdf_error=sqrt(pdf0)pdf_error=pdf_error/bin_widthtotal_pdf=(pdf0 > 0.1)/bin_widthsizes=bin_centersmin_pdf=1/bin_width;;  Done with total_pdf.;if KEYWORD_SET(N_events) then begin;;  Put minimum significant value of PDF in 0th element of PARTIAL_PDF;partial_pdf=min_pdf	; ;  Compute contributions to TOTAL_PDF from each scale,;  and store in PARTIAL_PDF;start=1finish=0for itt=0,it do begin	finish=finish+n_events(itt)	if(finish gt start) then begin		scaled_max_vol1=alog(max_vol[1:Total_events])		if (exponent ne 1.0d) then scaled_max_vol1=- 1./max_vol[start:finish]^alph		pdf1=HISTOGRAM(scaled_max_vol1, BINSIZE=bin_size, MAX=a_max, MIN=a_min, /NAN) 		pdf1=(pdf1 > 0.1)/bin_width	endif	partial_pdf=[[partial_pdf], [pdf1] ]	start=finish+1endforendifreturn, total_pdfend