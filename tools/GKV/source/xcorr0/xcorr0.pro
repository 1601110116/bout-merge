FORWARD_FUNCTION GKVsd_MINFORWARD_FUNCTION GKVsd_GridCopyFUNCTION GKVs1D::AxisValue, arg, _Extra=extra;; Purpose:;;	This function parses input line, and returns a structure containing the number ;	of the selected axis and the associated value. ;	Information on 'value' for this axis can be supplied on the command line.;	If it is, then the 'SignalWIndow' will be invoked to modify 'irange' in self.;;	Output:		Returns a structure with two tags:;;		axis	The (integer) value of the selected axis. ;			if no axis can be identified, then axis is ;`			set equal to  -1.;;		value	The 'value' associated with this axis.  If no value is supplied,;			then this tag is set to 'undefined'.;			;; 	Argument:;;			The (optional) argument is any legal axis identifier.;			That is, either an integer between 1 and nDims, or;			a STRING containing an axis mnemonic.;;	Keywords:;;	     Axis	If no argument is provided, then this keyword may be ;			used to identify the axis. Set axis ;			equal to any legal axis identifier (see above).;;	 mnemonic	Set the mnemonic of the selected axis equal to the desired ;			value to both identify the selected independent ;			variable, and set the desired axis value.;;	   index	Set 'index' to an integer value which is interpreted as an ;			index into the grid.values array.;;	    value	Set 'value' to the desired axis value.;; Written by W.M. Nevins;	3/9/02;; First find axis identifier;nDims = self -> NumDims()iaxis = -1IF(N_PARAMS() EQ 1) THEN BEGIN			; Take argument as axis identifier if present	iaxis = argENDIF ELSE BEGIN					; Else, look for the keyword 'Axis'	result = GetKeyWord('Axis', extra)	IF(Query_Integer(result)) THEN iaxis = result	IF(TypeOf(result) EQ 7) THEN BEGIN		IF(result NE 'undefined') THEN iaxis = result	ENDIFENDELSE;; If 'iaxis' is a mnemonic, then convert it to an integer axis identifier;IF(TypeOF(iaxis) EQ 7) THEN iaxis = self -> AxisNumber(iaxis)	IF(NOT Query_Integer(iaxis)) THEN BEGIN		MESSAGE, "Illegal axis identifier", /INFORMATIONAL		RETURN, {axis:-1}	ENDIF;; Check if we have a valid (integer) axis identifier;IF(iaxis NE -1) THEN BEGIN	IF((iaxis LT 1) OR (iaxis GT nDims)) THEN BEGIN		MESSAGE, "Illegal axis number", /INFORMATIONAL		RETURN, {axis:-1}		ENDIF;; or (if we haven't found an axis identifer yet); look for 'mnemonic = ...';ENDIF ELSE BEGIN	axisInfo = self -> GetAxis(extra)	FOR iaxis = 1, nDIms DO BEGIN		axisValue = axisInfo.(iaxis-1)		IF(TypeOf(axisValue) NE 7) THEN BEGIN			RETURN, {axis:iaxis, value:axisValue}		ENDIF	ENDFOR	;	; Failed to find a valid axis mnemonic 	;	MESSAGE, 'No valid axis identifier', /INFORMATIONAL	RETURN, {axis:-1}ENDELSE;; You should only get here if you already have an axis ID;; Check for 'range' on command line ; if it is not already set (by 'mnemonic = ...');result = GetKeyWord('value', extra)IF(TypeOf(result) NE 7) THEN RETURN, {axis:iaxis, value:result};; Check for 'irange' on the command line;result = GetKeyWord('index', extra)	IF(TypeOf(result) NE 7) THEN BEGIN		CASE iaxis OF			1	:	value = (*self.grid1)[result]			2	:	value = (*self.grid2)[result]			3	:	value = (*self.grid3)[result]			4	:	value = (*self.grid4)[result]		ENDCASE		RETURN, {axis:iaxis, value:result}	ENDIF;; and we're done ...;RETURN, {axis:iaxis}END ; ****** GKVs1D::AxisValue ****** ;FUNCTION GKVs2D::XCORR0, arg, _EXTRA=extra;; Purpose:;;	This function returns the cross correlation between 'self'; 	and 'ref' as a function of the specified independent variable in;	'self', and at zero lag (or displacement) in the remaining;	independent variable.  The correlation function is ;	obtained by averaging over the remanining variable(s).;; Arguments:;;			Any legal axis identifier. Defaults to the first axis.;			The independent variable may also be identified using an;			Axis mnemonic as described below. (Optional);;; Input Keywords:;;   'mnemonic'		Where 'mnemonic' is the mnemonic for the independent variable;			desired for the correlation function.  'Mnemonic' should be ;			set equal to the reference value of this independent variable.  ;			Defaults to the initial value of this axis. (Optional);;;	Ref		Set this keyword to a GKVsd object whose independent;			variable(s) are the same as the remaining independent;			variables of 'self'. Defaults to first element of 'self'.;			(Optional);;	Norm		Set this keyword (i.e., put '/Norm' on the command line);			to normalize the cross-correlation such that the;			maximum value is 1.  Default is no normalization;			-- that is, to return the cross-variance between 'self';			and 'ref'.  (Optional);; Written by W.M. Nevins;	3/9/02;;; Get axis ID;CASE N_PARAMS() OF	0	:	axisInfo = self -> AxisValue(     _Extra=extra)	1	:	axisInfo = self -> AxisValue(arg, _Extra=extra)	else	:	BEGIN				MESSAGE, 'XCORR0 called with too many arguments', /INFORMATIONAL				RETURN, 0			ENDENDCASEiaxis = axisInfo.axisIF(iaxis LE 0) THEN BEGIN	MESSAGE, 'XCORR0 called with axis identifier LE 0', /INFORMATIONAL	RETURN, 0ENDIFIF(N_TAGS(axisInfo) GT 1) THEN BEGIN	ref = self -> slice(axis=iaxis, value=axisInfo.value)ENDIFCASE iaxis OF	1	:	result = self -> XCORR01(ref=ref, _EXTRA=extra)	2	:	result = self -> XCORR02(ref=ref, _EXTRA=extra)	ELSE	:	BEGIN				MESSAGE, 'XCORR0 called with axis identifier GT 2', /INFORMATIONAL				RETURN, 0			ENDENDCASERETURN, resultEND	;  ****** GKVs2D::XCORR0 ******  ;