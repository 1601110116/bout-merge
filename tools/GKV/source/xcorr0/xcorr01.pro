FORWARD_FUNCTION GKVsd_MINFORWARD_FUNCTION GKVsd_GridCopyFUNCTION GKVs2D::XCORR01, Ref=ref, Norm=norm;; Purpose:;;	This function returns the cross correlation between 'self'; 	and 'ref' as a function of the first independent variable in;	'self', and at zero lag (or displacement) in the remaining;	independent variable.  The correlation function is ;	obtained by averaging over this variable.;; Keywords:;;	Ref		Set this keyword to a GKVs1D object whose independent;			variable is the same as the second two independent;			variables of 'self'. Defaults to first element of 'self'.;			(Optional);;	Norm		Set this keyword (i.e., put '/Norm' on the command line);			to normalize the cross-correlation such that the;			maximum value is 1.  Default is no normalization;			-- that is, to return the cross-variance between 'self';			and 'ref'.  (Optional);;	NoAverage	Set this keyword (i.e., put '/NoAverage' on the command line);			to remove the average from the reference object before;			computing the correlation function (or cross-variance).;			Default is to remove the average.  (Optional);;; Written by W.M. Nevins;	3/9/02;selfValues = *self.valuesirange = self.grid1.irangelength = irange[1] - irange[0] + 1selfInfo = SIZE(selfValues)nVals = selfInfo[2] > 1corrValues = MAKE_ARRAY(length, TYPE=selfInfo[3])IF(N_ELEMENTS(ref) NE 0) THEN BEGIN	; maybe put some error checks here???	refValues = *ref.valuesENDIF ELSE BEGIN	ref = self	refValues = selfValues[irange[0],*]ENDELSEnoAvg = 1result = GetKeyWord('NoAverage', _Extra)IF(Query_Integer(result)) THEN noAvg=resultIF(noAvg EQ 1) THEN refValues = refValues - TOTAL(refValues)/nVals	FOR i=0, (length-1) DO corrValues[i] = TOTAL(selfValues[(i+irange[0]),*]*(refValues))/nValsresultStr = {GKVs1D}FOR i=0, N_TAGS(resultStr)-1 DO resultStr.(i) = self.(i)resultStr.mnemonic = 'C_' + self.mnemonic + '_' + resultStr.mnemonicresultStr.title	= 'C{' + self.titleIF(ref.title NE self.title) THEN resultStr.title = resultStr.title + '|' + ref.titleresultStr.title = resultStr.title + '}'resultStr.Indices = PTR_NEW(REPLICATE('*', 1) )unitTest = (self.units NE '') +(ref.units NE '')CASE unitTest OF	0	:	resultStr.units = ''	1	:	resultStr.units = self.units + ref.units	2	:	resultStr.units = '(' + self.units + ')(' + ref.units + ')'ENDCASEvmin = GKVsd_MIN(corrValues, MAX=vmax)resultStr.vrange = [vmin, vmax]IF KEYWORD_SET(norm) THEN BEGIN	resultStr.values = PTR_NEW(corrValues/vmax)	resultStr.vrange = [vmin/vmax, 1.]ENDIF ELSE BEGIN	resultStr.values = PTR_NEW(corrValues)ENDELSEgrid = GKVsd_GridCopy(self.grid1, IRange=irange)resultStr.grid1 = gridresult = OBJ_NEW('GKVs1D', resultStr)RETURN, resultEND	; ****** GKVs2D::XCORR01 ****** ;FUNCTION GKVs3D::XCORR01, Ref=ref, Norm=norm;; Purpose:;;	This function returns the cross correlation between 'self'; 	and 'ref' as a function of the first independent variable in;	'self', and at zero lag (or displacement) in the remaining;	two independent variables.  The correlation function is ;	obtained by averaging over the remaining two variables.;; Keywords:;;	Ref		Set this keyword to a GKVs1D object whose independent;			variable is the same as the second two independent;			variables of 'self'. Defaults to first element of 'self'.;			(Optional);;	Norm		Set this keyword (i.e., put '/Norm' on the command line);			to normalize the cross-correlation such that the;			maximum value is 1.  Default is no normalization;			-- that is, to return the cross-variance between 'self';			and 'ref'.  (Optional);;	NoAverage	Set this keyword (i.e., put '/NoAverage' on the command line);			to remove the average from the reference object before;			computing the correlation function (or cross-variance).;			Default is to remove the average.  (Optional);;; Written by W.M. Nevins;	3/9/02;selfValues = *self.valuesirange = self.grid1.irangelength = irange[1] - irange[0] + 1selfInfo = SIZE(selfValues)nVals = selfInfo[2]*selfInfo[3] > 1corrValues = MAKE_ARRAY(length, TYPE=selfInfo[4])IF(N_ELEMENTS(ref) NE 0) THEN BEGIN	; maybe put some error checks here???	refValues = *ref.valuesENDIF ELSE BEGIN	ref = self	refValues = selfValues[irange[0],*,*]ENDELSEnoAvg = 1result = GetKeyWord('NoAverage', _Extra)IF(Query_Integer(result)) THEN noAvg=resultIF(noAvg EQ 1) THEN refValues = refValues - TOTAL(refValues)/nVals	FOR i=0, (length-1) DO corrValues[i] = TOTAL(selfValues[(i+irange[0]),*,*]*(refValues))/nValsresultStr = {GKVs1D}FOR i=0, N_TAGS(resultStr)-1 DO resultStr.(i) = self.(i)resultStr.mnemonic = 'C_' + self.mnemonic + '_' + resultStr.mnemonicresultStr.title	= 'C{' + self.titleIF(ref.title NE self.title) THEN resultStr.title = resultStr.title + '|' + ref.titleresultStr.title = resultStr.title + '}'resultStr.Indices = PTR_NEW(REPLICATE('*', 1) )unitTest = (self.units NE '') +(ref.units NE '')CASE unitTest OF	0	:	resultStr.units = ''	1	:	resultStr.units = self.units + ref.units	2	:	resultStr.units = '(' + self.units + ')(' + ref.units + ')'ENDCASEvmin = GKVsd_MIN(corrValues, MAX=vmax)resultStr.vrange = [vmin, vmax]IF KEYWORD_SET(norm) THEN BEGIN	resultStr.values = PTR_NEW(corrValues/vmax)	resultStr.vrange = [vmin/vmax, 1.]ENDIF ELSE BEGIN	resultStr.values = PTR_NEW(corrValues)ENDELSEgrid = GKVsd_GridCopy(self.grid1, IRange=irange)resultStr.grid1 = gridresult = OBJ_NEW('GKVs1D', resultStr)RETURN, resultEND	; ****** GKVs3D::XCORR01 ****** ;