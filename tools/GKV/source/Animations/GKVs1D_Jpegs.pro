PRO GKVs3D::Jpegs, True=true, _EXTRA=extra;; Purpose:;;		This routine is used to provide a sequence of JPEG;		images for an animation of 'self' over the independent;		variable stored in self.Grid3.  It creates a JPEG image of;		every iSkipth timeslice of 'self', and stores;		the result into a file selected by the user.;; Arguments:	NONE;; Input KeyWords:;;	iSkip			Interval between timeslices to be animated.;				Defaults to 1 (Optional).;;	trange		A two-element array specifying the first and ;				last time-slices of this animation.  ;				Defaults to self.Grid3.range (Optional).;;	'mnemonic'		The mnemonic of self.Grid3 can be used in;				place of the keyword 'trange' with the same ;				effect.  Defaults to self.Grid3.range ;				(Optional).;;	Shade_Surf		Set this KeyWord (i.e., '/Shade_Surf') to;				make a surface plot instead of an image.;				Defaults to making 'image' plots (Optional);;	Path			Set to path to folder where JPEG files are to;				be stored.  Defaults to the current working;				directory (Optional).;;	Xsize, Ysize	The size of the frame in 'device' pixels.;				Defaults to xsize = 600, ysize = 700.;				(Optional);;	Quality		Sets the quality index in the range of ;				0 ("terrible") to 100 ("excellent") of the ;				JPEG images to be produced.  The default is;				80 to produce "pretty good" quality.  Lower;				values of "Quality" pjroduce higher compression;				ratios and smaller files.  Default is Quality = 80.;				(Optional).;;	ShowLoad		Set this keyword to view images as they are loaded ;				into the jpeg file.  Default is not to show images.;				(Optional);							;; Written by W.M. Nevins;	9/20/00;; Check for keywords;;	iSkip=skip:;iskip = 1Lresult = GetKeyWord('iskip', extra)IF(TypeOF(result) NE 7) THEN iskip =LONG(result) > 0L;;	trange = [tmin, tmax];trange = self.Grid3.rangeresult = GetKeyWord('trange', extra)IF(TypeOf(result) NE 7) THEN BEGIN	IF(  (N_Elements(result) EQ 2) AND ( Query_Real(result) OR Query_Integer(result) )  ) THEN trange = resultENDIF;;	'mnemonic' = trange;result = GetKeyWord(self.grid3.mnemonic, extra)IF(TypeOF(result) NE 7) THEN BEGIN	IF(  (N_Elements(result) EQ 2) AND ( Query_Real(result) OR Query_Integer(result) )  ) THEN trange = resultENDIF; ; Turn trange into a range of indices;gridValues = *self.Grid3.valuesirange = LONARR(2)FOR i=0, 1 DO BEGIN	temp = (gridValues - trange[i])^2	eps = MIN(temp, indx)	irange[i] = indxENDFOR;;	Shade_Surf=shadeSurf;shadeSurf = 0result = GetKeyWord('Shade_Surf', extra)IF( Query_Integer(result) ) THEN shadeSurf = result;;	ShowLoad = showLoad;showLoad = 0result = GetKeyWord('ShowLoad', extra)IF( Query_Integer(result) ) THEN showLoad = result;;	Path=path ;cd, current = current_working_directorypath = 'current_working_directory'result = GetKeyWord('path', extra)IF(  (TypeOf(result) EQ 7) AND (result NE 'undefined')  ) THEN path = result;; Use PICKFILE to pick a filename for writing.;fileName = Dialog_Pickfile(Path=path, /NoConfirm, Get_Path=path, /Write);; Make sure the user didn't cancel out of PICKFILE.;IF( fileName EQ '') THEN BEGIN	MESSAGE, 'No file name was selected', /INFORMATIONAL	RETURNENDIF;; 	Xsize = xsize, Ysize = ysize;xSize = 600result = GetKeyWord('xsize', extra)IF(Query_Integer(result)) THEN xSize = result > 100ySize = 700result = GetKeyWord('ysize', extra)IF(Query_Integer(result)) THEN ySize = result > 100;;	Quality = quality;quality = 80result = GetKeyWord('Quality', extra)IF Query_Integer(result) THEN BEGIN	quality = result < 100	quality = quality > 0ENDIF;; Check visual depth;trueColor = 0DEVICE, Get_Visual_Depth=thisDepth            IF(thisDepth gt 8) THEN trueColor = 1 ;; Save info on colors;thisDevice = !D.NAMEnColors = !D.TABLE_SIZETVLCT, rr, gg, bb, /GET;; Render graphic in Z-buffer;SET_PLOT, 'Z'ERASEDEVICE, SET_RESOLUTION=[xsize, ysize]DEVICE, SET_COLORS=nColorsTVLCT, r, g, b;; Open 'fileName';GET_LUN, lunOPENW, lun, fileName, ERROR=fileError, MACTYPE='JFIF'IF(fileError) THEN BEGIN	MESSAGE, 'Error opening ' + filename, /INFORMATIONAL	SET_PLOT, thisDevice	RETURN ENDIF ;; begin writting JPEGs;FOR i=irange[0], irange[1], iskip DO BEGIN	IF( KEYWORD_SET(showLoad) ) THEN BEGIN		SET_PLOT, thisDevice		ERASE		IF( KEYWORD_SET(ShadeSurf) ) THEN BEGIN			self -> Shade_Surf,	indx1=i, _Extra=extra		ENDIF ELSE BEGIN			self -> Draw, 		indx1=i, _Extra=extra		ENDELSE		SET_PLOT, 'Z'		DEVICE, SET_RESOLUTION=[xsize, ysize]		DEVICE, SET_COLORS=nColors		TVLCT, r, g, b	ENDIF	IF( KEYWORD_SET(ShadeSurf) ) THEN BEGIN		self -> Shade_Surf,	indx1=i, _Extra=extra	ENDIF ELSE BEGIN		self -> Draw, 		indx1=i, _Extra=extra	ENDELSE	thisImage = TVRD()	TVLCT, r, g, b, /GET	;	; Write 'thisImage to the JPEG file.	;	IF(trueColor NE 1) THEN BEGIN		image24 = BYTARR(3, xSize, ySize)		image24(0,*,*) = r(thisImage)		image24(1,*,*) = g(thisImage)		image24(2,*,*) = b(thisImage)		WRITE_JPEG, image24, UNIT=lun, TRUE=1, QUALITY=quality	ENDIF ELSE BEGIN		WRITE_JPEG, thisimage, UNIT=lun, QUALITY=quality, TRUE=true	ENDELSE	ERASEENDFOR;; Close JPEG file;CLOSE, lunFREE_LUN, lun;; Get out of Z-Graphics buffer;SET_PLOT, thisDevice;; Change back to 'current_working_directory'CD, current_working_directory;; and we're done ...;RETURNEND	; ****** GKVs3D::Jpegs ****** ;